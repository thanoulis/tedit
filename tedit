#!/usr/bin/env tclsh

package require Tk

################################################################################
# VARIABLES
#
namespace eval tEdit {
  array set filename   {}
  array set folds      {}
  array set marks      {}
  array set marknum    {}

  variable tabnum      0
  variable untitlednum 1
  variable message     {}
  variable savename    {}
  variable filetypes   {{{All Files} {*}}
    {{Text Files} {*.txt *.TXT}} {{Log Files} {*.log *.LOG}}
    {{C Files} {*.c *.C}} {{C++ Files} {*.cpp *.CPP}} {{Header Files} {*.h *.H}}
    {{Go Files} {*.go *.GO}}
    {{Perl Files} {*.pl *.PL}} {{Perl Modules} {*.pm *.PM}}
    {{Python Files} {*.py *.PY}}
    {{Ruby Files} {*.rb *.RB}}
    {{Rust Files} {*.rs *.RS}}
    {{Tcl Files} {*.tcl *.TCL}}
  }
  variable browser     {false}
  variable recent      [list]
  variable filepath    {}
  variable modified    {}
  variable wrap        {none}
  variable showmenu    {.menu}
  variable blockcursor {false}
  variable showmarks   {false}
  variable showstatus  {true}
  variable linenumbers {false}
  variable showyscroll {true}
  variable showxscroll {true}
  variable tabstop     2
  variable tabs2spaces {true}
  variable spacing1    0
  variable spacing2    0
  variable spacing3    0

  variable theme       [ttk::style theme use]
  variable colors      {default}

  variable search      {}
  variable hsearch     [list]
  variable matchcase   {false}
  variable regexp      {-exact}
  variable replace     {}
  variable hreplace    [list]
  variable showsearch  {}
  variable showreplace {false}

  variable dndstart    {}
  variable aftercmd    {}
}

################################################################################
# PROCEDURES
#
proc showMessage {msg} {
  after cancel {set tEdit::message ""}
  set tEdit::message $msg
  after 5000 {set tEdit::message ""}
}

proc recentAdd {filename} {
  if {$filename ni $tEdit::recent} {
    lappend tEdit::recent $filename
    .menu.file entryconfigure "Recent Files" -state normal
    .menu.file.recent add command -label $filename -command [list openFile $filename]
  }
}

proc setModified {text} {
  set tEdit::modified [expr {[$text edit modified] ? {[Modified]} : ""}]
}

proc newTab {{position ""} {filename ""}} {
  set nb .nb
  set tabnum $tEdit::tabnum
  # set array for tabbed widgets
  array set tab [list \
    {tab}      "${nb}.tab${tabnum}"\
    {canvas}   "${nb}.tab${tabnum}.canvas"\
    {text}     "${nb}.tab${tabnum}.text"\
    {yscroll}  "${nb}.tab${tabnum}.yscroll"\
    {xscroll}  "${nb}.tab${tabnum}.xscroll"\
  ]
  # set arrays specific to this tab
  array set tEdit::filename [list $tab(tab) $filename]
  array set tEdit::folds    [list $tab(text) [list]]
  array set tEdit::marks    [list $tab(text) [list]]
  array set tEdit::marknum  [list $tab(text) 0]
  # increase tab number for future use
  incr tEdit::tabnum

  ttk::frame $tab(tab)
    tk::canvas $tab(canvas) -width 50 -highlightthickness 0 -background "#FFFF00"
    tk::text $tab(text) -relief sunken -highlightthickness 0 -takefocus 1 \
      -undo true -autoseparators true -maxundo 0 -blockcursor $tEdit::blockcursor \
      -insertunfocussed hollow -wrap $tEdit::wrap \
      -tabstyle wordprocessor -tabs $tEdit::tabstop \
      -spacing1 $tEdit::spacing1 -spacing2 $tEdit::spacing2 -spacing3 $tEdit::spacing3 \
      -yscrollcommand [list $tab(yscroll) set] \
      -xscrollcommand [list $tab(xscroll) set]
      # text tags management and starting colors
      $tab(text) tag configure tag_search     -foreground "#FFFF00" -background "#000000"
      $tab(text) tag configure tag_search_all -foreground "#000000" -background "#FFFF00"
      $tab(text) tag raise tag_search tag_search_all
    ttk::scrollbar $tab(yscroll) -orient vertical   -command [list $tab(text) yview]
    ttk::scrollbar $tab(xscroll) -orient horizontal -command [list $tab(text) xview]

    grid $tab(canvas)  -in $tab(tab) -row 0 -column 0 -sticky ns
    grid $tab(text)    -in $tab(tab) -row 0 -column 1 -sticky nswe
    grid $tab(yscroll) -in $tab(tab) -row 0 -column 2 -sticky ns
    grid $tab(xscroll) -in $tab(tab) -row 1 -column 0 -sticky we -columnspan 2
    grid rowconfigure    $tab(tab) $tab(text) -weight 1
    grid columnconfigure $tab(tab) $tab(text) -weight 1
    # remove canvas from view
    grid remove $tab(canvas)

  if {$filename eq ""} {
    set filename "Untitled $tEdit::untitlednum"
    incr tEdit::untitlednum
  } else {
    set filename [file tail $filename]
  }
  if {$position eq ""} {
    set position end
  } elseif {[expr {$position + 1}] >= [$nb index end]} {
    set position end
  } else {
    incr position
  }
  $nb insert $position $tab(tab) -text $filename
  $nb select $tab(tab)
  focus $tab(text)
  return $tab(text)
}

proc closeTab {tab {nb ".nb"}} {
  if {[llength $tab] > 1} {set tab [$nb select]}
  append text $tab ".text"
  if {[askSave $tab $text] != 0} {return 2}
  $nb forget $tab
  destroy $tab
  if {[$nb index end] < 1} {exit}
}

proc openFileDialog {} {
  set filenames [tk_getOpenFile -title "Open File" -parent . \
    -filetypes $tEdit::filetypes -multiple yes]
  if {$filenames eq ""} {return 2}
  foreach filename $filenames {
      openFile $filename
  }
}

proc openFile {filename} {
  foreach tab [.nb tabs] {
    if {$filename eq $tEdit::filename($tab)} {
      .nb select $tab
      showMessage "[file tail $filename] already open"
      return 1
    }
  }
  if {[file type $filename] ne "file"} {
    puts stderr "Cannot open: $filename is [file type $filename]"
    tk_messageBox -title "Cannot open file!" -icon error -type ok -parent . \
      -message "Cannot open file:" \
      -detail "$filename\nis a [file type $filename]."
    return 1
  }
  if {[catch {set data [open $filename r]} msg]} {
    puts stderr $msg
    showMessage [lindex [split $msg :] 1]
    return 1
  }
  set text [newTab [.nb index current] $filename]
  $text insert 0.0 [read -nonewline $data]
  close $data
  $text mark set insert 0.0
  $text see insert
  $text edit modified 0
  $text edit reset
  recentAdd $filename
}

proc storeFilename {filename} {
  set tab [.nb select]
  set tEdit::filename($tab) $filename
  .nb tab $tab -text [file tail $filename]
}

proc saveFileDialog {} {
  set tabname [.nb tab [.nb select] -text]
  set filename [tk_getSaveFile -title "Save As" -parent . \
    -filetypes $tEdit::filetypes -initialfile $tabname]
  if {$filename eq ""} {return 2}
  if {[file exists $filename]} {
    if {[file type $filename] ne "file"} {
      puts stderr "Cannot save: $filename is [file type $filename]"
      tk_messageBox -title "Cannot save file!" -icon error -type ok -parent . \
        -message "Cannot save [file tail $filename]:" \
        -detail "$filename\nis a [file type $filename]."
      return 1
    } elseif {[file writable $filename] == 0} {
      puts stderr "Cannot save: $filename is read only"
      tk_messageBox -title "Cannot save file!" -icon error -type ok -parent . \
        -message "Cannot save [file tail $filename]:" \
        -detail "$filename\nis read only."
      return 1
    } else {
      set tEdit::savename $filename
      return 0
    }
  } else {
    set tEdit::savename $filename
    return 0
  }
}

proc saveFile {filename text} {
  if {$filename eq ""} {
    if {[saveFileDialog] == 0} {
      set filename $tEdit::savename
    } else {
      return 2
    }
  }
  if {[catch {set data [open $filename w]} msg]} {
    puts stderr $msg
    showMessage [lindex [split $msg :] 1]
    return 1
  }
  puts -nonewline $data [$text get 0.0 end]
  close $data
  $text edit modified 0
  storeFilename $filename
  recentAdd $filename
  showMessage "$filename saved"
  set tEdit::filepath [file nativename $filename]
  return 0
}

proc saveAs {text} {
  if {[saveFileDialog] == 0} {
    saveFile $tEdit::savename $text
  }
}

proc askSave {tab text} {
  if {[$text edit modified]} {
    set answer [tk_messageBox -title "Save file?" -icon warning -parent . \
      -type yesnocancel -default yes \
      -message "[.nb tab $tab -text] has changed!" -detail "Save changes?"]
    switch -- $answer {
      yes {
        if {$tEdit::filename($tab) eq ""} {
          if {[saveFileDialog] == 0} {
            return [saveFile $tEdit::savename $text]
          } else {
            return 2
          }
        } else {
          return [saveFile $tEdit::filename($tab) $text]
        }
      }
      no {return 0}
      cancel {return 2}
    }
  }
  return 0
}

proc closeAll {} {
  foreach tab [.nb tabs] {
    .nb select $tab
    if {[closeTab $tab] == 2} {return 2}
  }
}

proc undoStack {text} {
  foreach {item action} {Undo canundo Redo canredo} {
    .menu.edit entryconfigure $item \
      -state [expr {[$text edit $action] ? "normal" : "disabled"}]
  }
}

proc undoRedo {command text} {
  if {[catch {$text edit $command} msg]} {
    showMessage $msg
  }
}

proc selectAll {text} {
  if {[$text get 0.0 end-1char] eq ""} {return 1}
  $text tag add sel 0.0 end-1char
}

proc populateBrowser {node {tree ".tree"}} {
  set path [$tree set $node fullpath]
  $tree delete [$tree children $node]
  if {[catch {glob -nocomplain -dir $path *} msg]} {
    showMessage [lindex [split $msg :] 1]
    return 1
  }
  foreach f [lsort -dictionary [glob -nocomplain -dir $path *]] {
    set type [file type $f]
    set id [$tree insert $node end -text [file tail $f] -values [list $f $type]]
    if {$type eq "directory"} {
      $tree insert $id 0
      $tree item $id -text [file tail $f]/
    }
  }
}

proc startBrowser {{tree ".tree"}} {
  foreach dir [lsort -dictionary [file volumes]] {
    populateBrowser [$tree insert {} end -text $dir -values [list $dir directory]] $tree
  }
}

proc openFileBrowser {node {tree ".tree"}} {
  if {$node eq ""} {return 2}
  if {[$tree set $node type] eq "directory"} {
    populateBrowser $node $tree
  } else {
    openFile [$tree set $node fullpath]
  }
}

proc toggleBrowser {show} {
  if {$show eq "true"} {
    .main insert 0 .browser
  } else {
    .main forget .browser
  }
}

proc foldText {tag text} {
  set selected [$text tag ranges $tag]
  if {$selected eq ""} {
    showMessage "select lines to fold"
    return 1
  }
  if {[set fold_sum [$text count -lines {*}$selected]] == 0} {
    showMessage "select lines to fold"
    return 1
  }
  scan $selected {%d.%d %d.%d} yfrom xfrom yto xto
  # check if a fold exists in current selection
  foreach old_fold $tEdit::folds($text) {
    scan [$text tag ranges $old_fold] {%d.%d %d.%d} old_yfrom old_xfrom old_yto old_xto
    if {$yfrom <= $old_yfrom && $yto >= $old_yto} {
      $old_fold invoke
    }
  }
  # get first line text to show in fold button
  set fold_text [$text get "${yfrom}.0" "${yfrom}.end"]
  set button_text "\u25b6\u25b6 [incr fold_sum] lines: $fold_text"
  set fold "${text}.fold${yfrom}-${yto}"
  tk::button $fold -text $button_text -padx 0 -pady 0 -relief flat \
    -takefocus 0 -cursor "hand2" -font [$text cget -font] \
    -command [list unfoldText $fold $text]
  $text tag add $fold "${yfrom}.0" "${yto}.end"
  $text tag configure $fold -elide true
  $text window create "${yfrom}.0" -window $fold
  $text mark set insert "${yto}.0+1line"
  $text tag remove $tag {*}$selected
  lappend tEdit::folds($text) $fold
  .menu.edit entryconfigure "Unfold All" -state normal
}

proc unfoldText {which text} {
  switch -- $which {
    all {
      foreach fold $tEdit::folds($text) {
        $text tag configure $fold -elide false
        destroy $fold
      }
      set tEdit::folds($text) [list]
    }
    default {
      $text tag configure $which -elide false
      destroy $which
      set tEdit::folds($text) [lsearch -inline -all -not -exact $tEdit::folds($text) $which]
    }
  }
  if {[llength $tEdit::folds($text)] == 0} {
    .menu.edit entryconfigure "Unfold All" -state disabled
  }
}

proc searchOne {what {direction "nextrange"}} {
  if {[searchAll $what] == 1} {return 1}
  if {$what ni $tEdit::hsearch} {
    lappend tEdit::hsearch $what
  }
  append text [.nb select] ".text"
  if {$direction eq "prevrange"} {
    set insert "insert-1char"
    set loop "end-1 end"
  } else {
    set insert "insert+1char"
    set loop "0 1"
  }
  set tagindex [$text tag $direction tag_search_all $insert]
  if {$tagindex eq ""}  {
    set tagindex [lrange [$text tag ranges tag_search_all] {*}$loop]
  }
  $text tag add tag_search {*}$tagindex
  $text mark set insert tag_search.first
  $text see tag_search.first
}

proc searchAll {what} {
  if {$what eq ""} {
    showMessage "nothing to search for"
    return 1
  }
  append text [.nb select] ".text"
  clearHighlight "tag_search tag_search_all"
  set search_cmd [list $text search $tEdit::regexp -all -count n -- $what 0.0 end]
  if {$tEdit::matchcase eq "false"} {
    set search_cmd [linsert $search_cmd 2 -nocase]
  }
  if {[catch {set taglist [{*}$search_cmd]} msg]} {
    .cbsearch configure -style error.TCombobox
    showMessage [lindex [split $msg :] 1]
    return 1
  } elseif {$taglist eq ""} {
    .cbsearch configure -style error.TCombobox
    showMessage "no matches found"
    return 1
  } else {
    set count 0
    foreach first $taglist {
      set last "$first+[lindex $n $count]indices"
      $text tag add tag_search_all $first $last
      incr count
    }
    set matches [expr {$count == 1 ? "match" : "matches"}]
    showMessage "$count $matches found"
  }
}

proc replaceOne {what with} {
  append text [.nb select] ".text"
  if {$with ni $tEdit:::hreplace} {
    lappend tEdit::hreplace $with
  }
  set taglist [$text tag ranges tag_search]
  if {$taglist eq ""} {
    searchOne $what
  }
  set taglist [$text tag ranges tag_search]
  if {$taglist eq ""} {
    showMessage "nothing to replace"
    return 1
  } else {
    $text edit separator
    $text replace {*}$taglist $with
    searchOne $what
  }
}

proc replaceAll {what with} {
  if {[searchAll $what] == 1} {
    showMessage "nothing to replace"
    return 1
  }
  append text [.nb select] ".text"
  set taglist [$text tag ranges tag_search_all]
  $text edit separator
  set count 0
  foreach {x y} $taglist {
    $text replace $x $y $with
    incr count
  }
  showMessage "replace finished: $count substitutions"
}

proc clearHighlight {tags} {
  append text [.nb select] ".text"
  foreach tag $tags {
    foreach {first last} [$text tag ranges $tag] {
      $text tag remove $tag $first $last
    }
  }
}

proc markToggle {} {
  append text [.nb select] ".text"
  set linenum [lindex [split [$text index insert] .] 0]
  append first $linenum ".0"
  append last $linenum ".end"
  set mark [lsearch -inline -all -glob [$text tag names $first] "Mark#*"]
  if {$mark eq ""} {
    if {[$text get $first $last] eq ""} {
      showMessage "cannot mark: empty line"
      return 1
    }
    append mark "Mark#" [incr tEdit::marknum($text)]
    $text mark set $mark $first
    $text tag configure $mark -underline true
    $text tag raise $mark sel
    $text tag add $mark $first $last
    lappend tEdit::marks($text) $mark
    foreach item {"Next Mark" "Clear Marks"} {
    .menu.marks entryconfigure $item -state normal
    }
  } else {
    markDelete $mark
  }
}

proc markSee {mark} {
  append text [.nb select] ".text"
  if {$mark eq ""} {return 1}
  $text mark set insert $mark
  $text see $mark
  focus $text
}

proc markNext {markbox} {
  append text [.nb select] ".text"
  if {[llength $tEdit::marks($text)] == 0} {
    showMessage "no marks found"
    return 1
  }
  set mark [$text mark next "insert+1char"]
  while {$mark ni $tEdit::marks($text)} {
    if {$mark eq ""} {set mark 0.0}
    set mark [$text mark next $mark]
  }
  set index [lsearch $tEdit::marks($text) $mark]
  $markbox selection clear 0 end
  $markbox selection set $index
  $markbox activate $index
  $text mark set insert $mark
  $text see $mark
}

proc markDelete {which} {
  append text [.nb select] ".text"
  set markbox .marks
  switch -- $which {
    all {
      foreach mark $tEdit::marks($text) {
        $text mark unset $mark
        $text tag delete $mark
      }
      set tEdit::marks($text) [list]
      set tEdit::marknum($text) 0
    }
    active {
      set mark [$markbox get active]
      $text mark unset $mark
      $text tag delete $mark
      $markbox delete active
    }
    default {
      $text mark unset $which
      $text tag delete $which
      $markbox delete [lsearch $tEdit::marks($text) $which]
    }
  }
  if {[llength $tEdit::marks($text)] == 0} {
    foreach item {"Next Mark" "Clear Marks"} {
    .menu.marks entryconfigure $item -state disabled
    }
  }
}

proc lineNumbers {text canvas args} {
  set checklist "bbox cget compare count debug dlineinfo dump get index mark peer search"
  if {[llength $args] == 0 || [lindex $args 0 1] ni $checklist} {
    $canvas configure -background [$text tag cget tag_search_all -background]
    $canvas delete all
    set i [$text index @0,0]
    while true {
      set dline [$text dlineinfo $i]
      if {[llength $dline] == 0} {break}
      set height [lindex $dline 3]
      set y [lindex $dline 1]
      set linenum [lindex [split $i .] 0]
      $canvas create text 2 $y -anchor nw -text $linenum \
        -font [$text cget -font] -fill [$text cget -foreground]
      set i [$text index "${i}+1line"]
    }
  }
}

proc toggleLineNumbers {show} {
  append canvas [.nb select] ".canvas"
  append text [.nb select] ".text"
  if {$show eq "true"} {
    bind $text <Configure> [list lineNumbers $text $canvas]
    trace add execution $text leave [list lineNumbers $text $canvas]
    grid $canvas
  } else {
    bind $text <Configure> {return 0}
    trace remove execution $text leave [list lineNumbers $text $canvas]
    grid remove $canvas
  }
}

proc toggleView {widget show} {
  if {$show eq "false"} {
    grid remove $widget
    switch -- $widget {
      .lfreplace {focus .cbsearch}
      default    {focus [.nb select].text}
    }
  } else {
    grid $widget
    switch -- $widget {
      .fsearch   {focus .cbsearch}
      .lfreplace {focus .cbreplace}
      default    {focus [.nb select].text}
    }
  }
}

proc setTabstop {tabs2spaces tabstop} {
  append text [.nb select] ".text"
  if {$tabs2spaces eq "true"} {
    bind Text <Tab> [list $text insert insert [string repeat " " $tEdit::tabstop]]
  } else {
    bind Text <Tab> [list $text insert insert "\t"]
  }
  $text configure -tabs "[expr {$tabstop * [font measure [$text cget -font] 0]}] left"
}

proc selectFont {text font} {
  $text configure -font [font actual $font]
}

proc setFont {tabstop} {
  append text [.nb select] ".text"
  tk fontchooser configure -title "Select Font" -parent . \
    -font [$text cget -font] -command [list selectFont $text]
  tk fontchooser show
  $text configure -tabs "[expr {$tabstop * [font measure [$text cget -font] 0]}] left"
}

proc setSpacing {type spacing} {
  append text [.nb select] ".text"
  $text configure $type $spacing
}

proc colorScheme {colorscheme} {
  append text [.nb select] ".text"
  switch -- $colorscheme {
    amber {
      array set color {
        foreground "#FFBF00" background "#000000" highlight "#0000FF"
      }
    }
    black {
      array set color {
        foreground "#C0C0C0" background "#000000" highlight "#0000FF"
      }
    }
    blue {
      array set color {
        foreground "#FFFF00" background "#0000FF" highlight "#444444"
      }
    }
    brownsugar {
      array set color {
        foreground "#FF9999" background "#472400" highlight "#000000"
      }
    }
    gray {
      array set color {
        foreground "#D6D6D6" background "#4E4E4E" highlight "#0000FF"
      }
    }
    green {
      array set color {
        foreground "#00FF00" background "#000000" highlight "#0000FF"
      }
    }
    salmon {
      array set color {
        foreground "#222200" background "#CA607B" highlight "#DED494"
      }
    }
    sugar {
      array set color {
        foreground "#000000" background "#EEEEEE" highlight "#FFFF00"
      }
    }
    default {
      array set color {
        foreground "#000000" background "#FFFFFF" highlight "#FFFF00"
      }
    }
  }
  $text configure -insertbackground $color(foreground)
  $text configure -foreground $color(foreground)
  $text configure -background $color(background)
  $text tag configure tag_search -foreground $color(highlight) \
    -background [$text cget -foreground]
  $text tag configure tag_search_all -foreground [$text cget -foreground] \
    -background $color(highlight)
}

proc base64Encode {} {
  set filename [file nativename [tk_getOpenFile -title "Select File to Encode" \
    -parent . -multiple no]]
  if {$filename eq ""} {return 2}
  if {[file type $filename] ne "file"} {
    puts stderr "Cannot open: $filename is [file type $filename]"
    tk_messageBox -title "Cannot open file!" -icon error -type ok -parent . \
      -message "Cannot open file:" \
      -detail "$filename\nis a [file type $filename]."
    return 1
  }
  if {[catch {set data [open $filename r]} msg]} {
    puts stderr $msg
    showMessage [lindex [split $msg :] 1]
    return 1
  }
  fconfigure $data -translation binary
  set encoded [binary encode base64 -maxlen 75 [read -nonewline $data]]
  close $data
  set text [newTab [.nb index current] "${filename}.b64"]
  $text insert 0.0 $encoded
  $text mark set insert 0.0
  $text see insert
  $text edit modified 0
  $text edit reset
  showMessage "Encoding finished"
}

proc focusTab {tab} {
  set tEdit::filepath [file nativename $tEdit::filename($tab)]
  append text $tab ".text"
  setModified $text
  undoStack $text
  # toggle "Unfold all" menu state
  .menu.edit entryconfigure "Unfold All" \
    -state [expr {$tEdit::folds($text) eq "" ? "disabled" : "normal"}]
  # toggle "Next Mark" "Clear Marks" menu state
  .marks configure -listvariable tEdit::marks($text)
  foreach item {"Next Mark" "Clear Marks"} {
    .menu.marks entryconfigure $item \
      -state [expr {$tEdit::marks($text) eq "" ? "disabled" : "normal"}]
  }
  $text configure -wrap $tEdit::wrap
  $text configure -blockcursor $tEdit::blockcursor
  toggleView "${tab}.yscroll" $tEdit::showyscroll
  toggleView "${tab}.xscroll" $tEdit::showxscroll
  setTabstop $tEdit::tabs2spaces $tEdit::tabstop
  foreach spacing {spacing1 spacing2 spacing3} {
    setSpacing "-${spacing}" [set "tEdit::${spacing}"]
  }
  colorScheme $tEdit::colors
  set tEdit::linenumbers \
    [expr {[trace info execution $text] eq "" ? "false" : "true"}]
  # keep focusing the text widget while traversing tabs
  focus $text
}

proc tabsMenu {W x y X Y} {
  .menutabs.goto delete 0 end
  .menutabs delete 0 1
  .menutabs insert 0 command -label "New Tab" -underline 5 \
    -command [list newTab [lindex [$W index @$x,$y]]]
  .menutabs insert 1 command -label "Close Tab" -underline 0 \
    -command [list closeTab [lindex [$W tabs] [$W index @$x,$y]]]
  foreach tabid [$W tabs] {
    set tabname [$W tab $tabid -text]
    .menutabs.goto add command -label $tabname -command "$W select $tabid"
  }
  tk_popup .menutabs $X $Y
}

proc nextTab {{nb ".nb"}} {
  set tabid [$nb index current]
  incr tabid
  if {$tabid >= [$nb index end]} {set tabid 0}
  $nb select $tabid
}

proc prevTab {{nb ".nb"}} {
  set tabid [$nb index current]
  incr tabid -1
  if {$tabid < 0} {set tabid [expr {[$nb index end] - 1}]}
  $nb select $tabid
}

proc dragDelay {W x y X Y} {
  set tEdit::aftercmd [list dragTab $W $x $y $X $Y]
  after 200 $tEdit::aftercmd
}

proc dragTab {W x y X Y} {
  set tEdit::aftercmd ""
  set tEdit::dndstart [$W index @$x,$y]
  # check for a valid start
  if {[string is integer -strict $tEdit::dndstart]} {
    # create window to show when drag
    set tabid [lindex [$W tabs] [$W index @$x,$y]]
    set tabtext [$W tab $tabid -text]
    toplevel .dnd
    tk::label .dnd.tabname -relief raised -padx 5 -pady 5 -text $tabtext
    pack .dnd.tabname -in .dnd -expand true -fill both
    wm resizable .dnd 0 0
    wm geometry .dnd "+${X}+${Y}"
    wm overrideredirect .dnd 1
    wm attributes .dnd -topmost true
    bind $W <Motion> {moveTab %W %x %y %X %Y}
    $W configure -cursor "hand2"
  }
}

proc dropTab {W x y} {
  if {$tEdit::aftercmd ne ""} {
    after cancel $tEdit::aftercmd
    focus [.nb select].text
    return 0
  }
  $W configure -cursor "left_ptr"
  set from $tEdit::dndstart
  # check for a valid source
  if {[string is integer -strict $from]} {
    set to [$W index @$x,$y]
    # check for a valid destination
    if {[string is integer -strict $to]} {
      set tab [lindex [$W tabs] $from]
      $W insert $to $tab
    }
  }
  set tEdit::dndstart ""
  bind $W <Motion> {return 0}
  destroy .dnd
  focus [.nb select].text
}

proc moveTab {W x y X Y} {
  if {[winfo exists .dnd]} {
    # check for valid path
    set to [$W index @$x,$y]
    if {[string is integer -strict $to]} {
      wm geometry .dnd "+${X}+${Y}"
    }
  }
}

proc systemDetails {} {
  tk_messageBox -title "System Details" -icon info -type ok -parent . \
    -message "Tcl/Tk Version: [info patchlevel]" \
    -detail "\
      User Name:\t$::tcl_platform(user)\n\
      Hostname:\t[info hostname]\n\
      OS Family:\t$::tcl_platform(platform)\n\
      OS Identifier:\t$::tcl_platform(os)\n\
      OS Version:\t$::tcl_platform(osVersion)\n\
      Architecture:\t$::tcl_platform(machine)\n\
      Window System:\t[tk windowingsystem]"
}

proc helpAbout {} {
  tk_messageBox -title "About tEdit" -icon info -type ok -parent . \
    -message "tEdit" -detail \
{A simple tabbed text editor,
written in core Tcl/Tk.

MIT License

Copyright (c) Thanos Zygouris
<athanasios.zygouris@gmail.com>}
}

################################################################################
# MENUS
#
proc createMenus {} {
  option add *tearOff false
  . configure -menu [menu .menu]
  .menu add cascade -label "File" -underline 0 -menu [menu .menu.file]
    .menu.file add command -label "New Tab" -underline 4 \
      -accelerator "Ctrl+T" -command {newTab [.nb index current]}
    .menu.file add command -label "Close Tab" -underline 1 \
      -accelerator "Ctrl+F4" -command {closeTab [.nb select]}
    .menu.file add separator
    .menu.file add command -label "Open..." -underline 0 \
      -accelerator "Ctrl+O" -command {openFileDialog}
    .menu.file add command -label "Save" -underline 0 \
      -accelerator "Ctrl+S" \
      -command {saveFile $tEdit::filename([.nb select]) [.nb select].text}
    .menu.file add command -label "Save As..." -underline 5 \
      -accelerator "Ctrl+Shift+S" -command {saveAs [.nb select].text}
    .menu.file add separator
      .menu.file add cascade -label "Recent Files" -underline 0 \
        -state disabled -menu [menu .menu.file.recent]
    .menu.file add separator
    .menu.file add command -label "Base64 Encode..." -underline 7 \
      -accelerator "Ctrl+E" -command {base64Encode}
    .menu.file add separator
    .menu.file add command -label "Close All" -underline 0 \
      -accelerator "Ctrl+Q" -command {closeAll}
    .menu.file add command -label "Exit" -underline 1 \
      -accelerator "Ctrl+Shift+Q" -command {exit}
  .menu add cascade -label "Edit" -underline 0 -menu [menu .menu.edit]
    .menu.edit add command -label "Undo" -underline 0 \
      -accelerator "Ctrl+Z" -command {undoRedo undo [.nb select].text}
    .menu.edit add command -label "Redo" -underline 0 \
      -accelerator "Ctrl+Shift+Z" -command {undoRedo redo [.nb select].text}
    .menu.edit add separator
    .menu.edit add command -label "Cut" -underline 2 \
      -accelerator "Ctrl+X" -command {tk_textCut [.nb select].text}
    .menu.edit add command -label "Copy" -underline 0 \
      -accelerator "Ctrl+C" -command {tk_textCopy [.nb select].text}
    .menu.edit add command -label "Paste" -underline 0 \
      -accelerator "Ctrl+V" -command {tk_textPaste [.nb select].text}
    .menu.edit add separator
    .menu.edit add command -label "Select All" -underline 7 \
      -accelerator "Ctrl+A" -command {selectAll [.nb select].text}
    .menu.edit add separator
    .menu.edit add command -label "Fold Lines" -underline 0 \
      -accelerator "Ctrl+J" -command {foldText sel [.nb select].text}
    .menu.edit add command -label "Unfold All" -underline 1 \
      -accelerator "Ctrl+Shift+J" -command {unfoldText all [.nb select].text}
  .menu add cascade -label "Search" -underline 0 -menu [menu .menu.search]
    .menu.search add checkbutton -label "Show Search" -underline 0 \
      -accelerator "Ctrl+F" \
      -variable tEdit::showsearch -onvalue "true" -offvalue "false" \
      -command {toggleView .fsearch $tEdit::showsearch}
    .menu.search add command -label "Find Next" -underline 5 \
      -accelerator "F3" -command {searchOne $tEdit::search nextrange}
    .menu.search add command -label "Find Prev" -underline 5 \
      -accelerator "Shift+F3" -command {searchOne $tEdit::search prevrange}
    .menu.search add command -label "Clear Highlight" -underline 0 \
      -accelerator "Ctrl+L" \
      -command {clearHighlight "tag_search tag_search_all"}
  .menu add cascade -label "Marks" -underline 0 -menu [menu .menu.marks]
    .menu.marks add checkbutton -label "Show Marks" -underline 0 \
      -accelerator "Shift+F5" \
      -variable tEdit::showmarks -onvalue "true" -offvalue "false" \
      -command {toggleView .fmarks $tEdit::showmarks}
    .menu.marks add command -label "Mark Toggle" -underline 0 \
      -accelerator "Ctrl+M" -command {markToggle}
    .menu.marks add command -label "Next Mark" -underline 0 \
      -accelerator "F5" -state disabled -command {markNext .marks}
    .menu.marks add command -label "Clear Marks" -underline 0 \
      -accelerator "Ctrl+Shift+M" -state disabled -command {markDelete "all"}
  .menu add cascade -label "Show" -underline 3 -menu [menu .menu.show]
    .menu.show add checkbutton -label "File Browser" -underline 0 \
      -accelerator "F2" \
      -variable tEdit::browser -onvalue "true" -offvalue "false" \
      -command {toggleBrowser $tEdit::browser}
    .menu.show add separator
    .menu.show add checkbutton -label "Line Numbers" -underline 5 \
      -variable tEdit::linenumbers -onvalue "true" -offvalue "false" \
      -command {toggleLineNumbers $tEdit::linenumbers}
    .menu.show add separator
    .menu.show add checkbutton -label "Menu Bar" -underline 0 \
      -variable tEdit::showmenu -onvalue ".menu" -offvalue "" \
      -command {. configure -menu $tEdit::showmenu}
    .menu.show add checkbutton -label "Status Bar" -underline 7 \
      -variable tEdit::showstatus -onvalue "true" -offvalue "false" \
      -command {toggleView .statusbar $tEdit::showstatus}
    .menu.show add checkbutton -label "Vertical Scrollbar" -underline 0 \
      -variable tEdit::showyscroll -onvalue "true" -offvalue "false" \
      -command {toggleView [.nb select].yscroll $tEdit::showyscroll}
    .menu.show add checkbutton -label "Horizontal Scrollbar" -underline 0 \
      -variable tEdit::showxscroll -onvalue "true" -offvalue "false" \
      -command {toggleView [.nb select].xscroll $tEdit::showxscroll}
  .menu add cascade -label "Options" -underline 0 -menu [menu .menu.options]
    .menu.options add checkbutton -label "Word Wrap" -underline 5 \
      -accelerator "Ctrl+W" \
      -variable tEdit::wrap -onvalue "word" -offvalue "none" \
      -command {[.nb select].text configure -wrap $tEdit::wrap}
    .menu.options add separator
    .menu.options add checkbutton -label "Block Cursor" -underline 0 \
      -accelerator "Ctrl+B" \
      -variable tEdit::blockcursor -onvalue "true" -offvalue "false" \
      -command {[.nb select].text configure -blockcursor $tEdit::blockcursor}
    .menu.options add separator
    .menu.options add command -label "Set Font..." -underline 4 \
      -command {setFont $tEdit::tabstop}
    .menu.options add cascade -label "Line Spacing" -underline 0 \
      -menu [menu .menu.options.spacing]
      .menu.options.spacing add cascade -label "Space Above Lines" -underline 6 \
        -menu [menu .menu.options.spacing.1]
        for {set i 0} {$i <= 9} {incr i} {
          .menu.options.spacing.1 add radiobutton -label $i -underline 0 \
            -variable tEdit::spacing1 -value $i \
            -command {setSpacing -spacing1 $tEdit::spacing1}
        }
      .menu.options.spacing add cascade -label "Space Between Warps" -underline 9 \
        -menu [menu .menu.options.spacing.2]
        for {set i 0} {$i <= 9} {incr i} {
          .menu.options.spacing.2 add radiobutton -label $i -underline 0 \
            -variable tEdit::spacing2 -value $i \
            -command {setSpacing -spacing2 $tEdit::spacing2}
        }
      .menu.options.spacing add cascade -label "Space Below Lines" -underline 6 \
        -menu [menu .menu.options.spacing.3]
        for {set i 0} {$i <= 9} {incr i} {
          .menu.options.spacing.3 add radiobutton -label $i -underline 0 \
            -variable tEdit::spacing3 -value $i \
            -command {setSpacing -spacing3 $tEdit::spacing3}
        }
    .menu.options add separator
    .menu.options add cascade -label "Colorscheme" -underline 0 \
      -menu [menu .menu.options.colors]
      foreach colorscheme {amber black blue brownsugar default gray green salmon sugar} {
        .menu.options.colors add radiobutton -label $colorscheme \
        -variable tEdit::colors -value $colorscheme \
        -command {colorScheme $tEdit::colors}
      }
    .menu.options add cascade -label "Themes" -underline 0 \
      -menu [menu .menu.options.themes]
      foreach theme [ttk::style theme names] {
        .menu.options.themes add radiobutton -label $theme \
          -variable tEdit::theme -value $theme \
          -command [list ttk::style theme use $theme]
      }
    .menu.options add separator
    .menu.options add cascade -label "Tab Stops" -underline 0 \
      -menu [menu .menu.options.tabstop]
      foreach i [list 2 4 6 7 8] {
        .menu.options.tabstop add radiobutton -label $i -underline 0 \
          -variable tEdit::tabstop -value $i \
          -command {setTabstop $tEdit::tabs2spaces $tEdit::tabstop}
      }
    .menu.options add checkbutton -label "Tabs to Spaces" -underline 8 \
      -variable tEdit::tabs2spaces -onvalue "true" -offvalue "false" \
      -command {setTabstop $tEdit::tabs2spaces $tEdit::tabstop}
  .menu add cascade -label "Help" -underline 0 -menu [menu .menu.help]
    .menu.help add command -label "System Details..." -underline 0 \
      -command {systemDetails}
    .menu.help add separator
    .menu.help add command -label "About tEdit..." -underline 0 \
   -accelerator "F1" -command {helpAbout}

  # popup menu for managing tabs
  menu .menutabs
    .menutabs add command -label "New Tab" -underline 5 \
      -command {.menu.file invoke "New Tab"}
    .menutabs add command -label "Close Tab" -underline 0 \
      -command {.menu.file invoke "Close Tab"}
    .menutabs add separator
    .menutabs add cascade -label "Go To" -underline 0 -menu [menu .menutabs.goto]
    .menutabs add separator
    .menutabs add command -label "Close All" -underline 6 \
      -command {.menu.file invoke "Close All"}
    .menutabs add command -label "Exit" -underline 1 \
      -command {.menu.file invoke "Exit"}

  # popup menu for search and replace comboboxes
  menu .menusearch
    .menusearch add command -label "Cut" \
      -underline 2 -accelerator "Ctrl+X" \
      -command {event generate [focus] <<Cut>>}
    .menusearch add command -label "Copy" \
      -underline 0 -accelerator "Ctrl+C" \
      -command {event generate [focus] <<Copy>>}
    .menusearch add command -label "Paste" \
      -underline 0 -accelerator "Ctrl+V" \
      -command {event generate [focus] <<Paste>>}
}

################################################################################
# WIDGETS
#
proc createWidgets {} {
  # set different styles for search/replace comboboxes
  ttk::style configure valid.TCombobox -fieldbackground white
  ttk::style configure error.TCombobox -fieldbackground red

  ttk::panedwindow .main -orient horizontal
    ttk::frame .browser
      ttk::treeview .tree -selectmode browse \
        -columns {fullpath type} -displaycolumns "" \
        -yscrollcommand {.treeyscroll set} -xscrollcommand {.treexscroll set}
        .tree heading #0 -anchor center -text "File Browser"
      ttk::scrollbar .treeyscroll -orient vertical   -command {.tree yview}
      ttk::scrollbar .treexscroll -orient horizontal -command {.tree xview}
      # grid treeview and scrollbars in the left pane frame
      grid .tree        -in .browser -row 0 -column 0 -sticky nswe
      grid .treeyscroll -in .browser -row 0 -column 1 -sticky ns
      grid .treexscroll -in .browser -row 1 -column 0 -sticky we
      grid rowconfigure    .browser .tree -weight 1
      grid columnconfigure .browser .tree -weight 1

    ttk::frame .editor
      ttk::notebook .nb -takefocus 0
      ttk::notebook::enableTraversal .nb
      ttk::labelframe .fmarks -borderwidth 1 -relief flat -text "Marks:"
        tk::listbox .marks -takefocus 0 -highlightthickness 0 -width 10 \
          -yscrollcommand {.ymarks set} -xscrollcommand {.xmarks set}
        ttk::scrollbar .ymarks -orient vertical   -command {.marks yview}
        ttk::scrollbar .xmarks -orient horizontal -command {.marks xview}
        # grid listbox and scrollbars in the labelframe
        grid .marks  -in .fmarks -row 0 -column 0 -sticky ns
        grid .ymarks -in .fmarks -row 0 -column 1 -sticky ns
        grid .xmarks -in .fmarks -row 1 -column 0 -sticky we
        grid rowconfigure .fmarks .marks -weight 1
      # grid notebook and marks in the right pane frame
      grid .nb     -in .editor -row 0 -column 0 -sticky nswe
      grid .fmarks -in .editor -row 0 -column 1 -sticky ns
      grid rowconfigure    .editor .nb -weight 1
      grid columnconfigure .editor .nb -weight 1
      # remove marks from view
      grid remove .fmarks

  ttk::frame .fsearch -borderwidth 1 -relief sunken
    ttk::labelframe .lfsearch -borderwidth 1 -relief flat -text "Search for:"
      ttk::combobox .cbsearch -style valid.TCombobox \
        -textvariable tEdit::search -values $tEdit::hsearch \
        -postcommand {.cbsearch configure -values $tEdit::hsearch}
      ttk::button .bfindnext -text "Find Next" -width 9 \
        -underline 5 -takefocus 0 \
        -command {.menu.search invoke "Find Next"}
      ttk::button .bfindprev -text "Find Prev" -width 9 \
        -underline 5 -takefocus 0 \
        -command {.menu.search invoke "Find Prev"}
      ttk::checkbutton .ckmatchcase -text "Match Case" \
        -underline 0 -takefocus 0 \
        -variable tEdit::matchcase -onvalue "true" -offvalue "false"
      ttk::checkbutton .ckregexp -text "Regular Expression" \
        -underline 8 -takefocus 0 \
        -variable tEdit::regexp -onvalue "-regexp" -offvalue "-exact"
      ttk::checkbutton .ckreplace -text "Replace" \
        -underline 0 -takefocus 0 \
        -variable tEdit::showreplace -onvalue "true" -offvalue "false" \
        -command {toggleView .lfreplace $tEdit::showreplace}
      # grid them in the search labelframe
      grid .cbsearch    -in .lfsearch -row 0 -column 0 -sticky we
      grid .bfindnext   -in .lfsearch -row 0 -column 1 -sticky w
      grid .bfindprev   -in .lfsearch -row 0 -column 2 -sticky w
      grid .ckregexp    -in .lfsearch -row 1 -column 0 -sticky w
      grid .ckmatchcase -in .lfsearch -row 1 -column 1 -sticky w -columnspan 2
      grid .ckreplace   -in .lfsearch -row 1 -column 3 -sticky e
      grid columnconfigure .lfsearch .ckreplace -weight 1

    ttk::labelframe .lfreplace -borderwidth 1 -relief flat -text "Replace with:"
      ttk::combobox .cbreplace -style valid.TCombobox \
        -textvariable tEdit::replace -values $tEdit::hreplace \
        -postcommand {.cbreplace configure -values $tEdit::hreplace}
      ttk::button .breplace -text "Replace" -width 9 \
        -underline 0 -takefocus 0 \
        -command {replaceOne $tEdit::search $tEdit::replace}
      ttk::button .breplaceall -text "All" -width 9 \
        -underline 0 -takefocus 0 \
        -command {replaceAll $tEdit::search $tEdit::replace}
        # grid them in the replace labelframe
        grid .cbreplace   -in .lfreplace -row 0 -column 0 -sticky we
        grid .breplace    -in .lfreplace -row 0 -column 1 -sticky w
        grid .breplaceall -in .lfreplace -row 0 -column 2 -sticky w
      # grid find and replace labelframes in the search frame
      grid .lfsearch  -in .fsearch -row 0 -column 0 -sticky we
      grid .lfreplace -in .fsearch -row 1 -column 0 -sticky we
      grid columnconfigure .fsearch .lfsearch -weight 1
      # remove replace frame from view
      grid remove .lfreplace

  ttk::frame .statusbar -borderwidth 1 -relief sunken
    ttk::label .filepath -relief flat -anchor w -textvariable tEdit::filepath
    ttk::label .message  -relief flat -anchor c -textvariable tEdit::message
    ttk::label .modified -relief flat -anchor e -textvariable tEdit::modified
    ttk::sizegrip .sizegrip
    grid .filepath -in .statusbar -row 0 -column 0 -sticky w
    grid .message  -in .statusbar -row 0 -column 1 -sticky we
    grid .modified -in .statusbar -row 0 -column 2 -sticky e
    grid .sizegrip -in .statusbar -row 0 -column 3 -sticky e
    grid columnconfigure .statusbar .message -weight 1

  grid .main      -in . -row 0 -column 0 -sticky nswe
  grid .fsearch   -in . -row 1 -column 0 -sticky we
  grid .statusbar -in . -row 2 -column 0 -sticky we
  grid rowconfigure    . .main -weight 1
  grid columnconfigure . .main -weight 1
  # remove search frame from view
  grid remove .fsearch

  .main add .editor
}

################################################################################
# BINDINGS
#
proc createBindings {} {
  # deactivate some predefined bindings from Text widget
  set bindings [list \
    <Tab> \
    <Control-Tab> \
    <Control-Shift-Tab> \
    <Control-a> \
    <Control-b> \
    <Control-e> \
    <Control-f> \
    <Control-o> \
    <Control-t> \
    <Control-z> \
    <Control-Z>]
  foreach keysym $bindings {
    bind Text $keysym {return 0}
  }
  # text widget bindings
  bind Text <<Modified>> {setModified %W}
  bind Text <<UndoStack>> {undoStack %W}
  bind Text <ButtonPress-3> {focus %W; tk_popup .menu.edit %X %Y}
  bind Text <Control-ButtonPress-3> {focus %W; tk_popup .menu %X %Y}
  bind Text <Control-ButtonRelease-1> {.menu.marks invoke "Mark Toggle"}

  # main window bindings
  bind all <Control-t>  {.menu.file invoke "New Tab"}
  bind all <Control-F4> {.menu.file invoke "Close Tab"}
  bind all <Control-o>  {.menu.file invoke "Open..."}
  bind all <Control-s>  {.menu.file invoke "Save"}
  bind all <Control-S>  {.menu.file invoke "Save As..."}
  bind all <Control-e>  {.menu.file invoke "Base64 Encode..."}
  bind all <Control-q>  {.menu.file invoke "Close All"}
  bind all <Control-Q>  {.menu.file invoke "Exit"}
  bind all <Control-z>  {.menu.edit invoke "Undo"}
  bind all <Control-Z>  {.menu.edit invoke "Redo"}
  bind all <Control-a>  {.menu.edit invoke "Select All"}
  bind all <Control-j>  {.menu.edit invoke "Fold Lines"}
  bind all <Control-J>  {.menu.edit invoke "Unfold All"}
  bind all <Control-f>  {.menu.search invoke "Show Search"}
  bind all <F3>         {.menu.search invoke "Find Next"}
  bind all <Shift-F3>   {.menu.search invoke "Find Prev"}
  bind all <Control-l>  {.menu.search invoke "Clear Highlight"}
  bind all <Shift-F5>   {.menu.marks invoke "Show Marks"}
  bind all <Control-m>  {.menu.marks invoke "Mark Toggle"}
  bind all <F5>         {.menu.marks invoke "Next Mark"}
  bind all <Control-M>  {.menu.marks invoke "Clear Marks"}
  bind all <F2>         {.menu.show invoke "File Browser"}
  bind all <Control-w>  {.menu.options invoke "Word Wrap"}
  bind all <Control-b>  {.menu.options invoke "Block Cursor"}
  bind all <F1>         {.menu.help invoke "About tEdit..."}
  # toggle menu "Set Font..." state
  bind all <<TkFontchooserVisibility>> {
    .menu.options entryconfigure "Set Font..." \
      -state [expr {[tk fontchooser configure -visible] ? "disabled" : "normal"}]
  }
  # make Return and Keypad-Enter keys behave the same
  bind all <KP_Enter> {event generate %W <Return>}
  # make all TAB keys behave the same
  catch {bind all <ISO_Left_Tab> {event generate %W <Tab>}}

  # treeview widget bindings
  foreach keysym {<Return> <Double-ButtonRelease-1>} {
    bind .tree $keysym {openFileBrowser [%W focus] %W}
  }
  bind .tree <<TreeviewOpen>> {populateBrowser [%W focus] %W}

  # notebook bindings
  # on tab change reload user settings (except font and line numbering)
  bind .nb <<NotebookTabChanged>> {focusTab [.nb select]}
  # popup menu on tab labels
  bind .nb <ButtonPress-3> {tabsMenu %W %x %y %X %Y}
  # mouse wheel rotate tabs
  bind .nb <4> {nextTab}
  bind .nb <5> {prevTab}
  # drag and drop tab replacement
  bind .nb <ButtonPress-1>           {dragDelay %W %x %y %X %Y}
  bind .nb <ButtonRelease-1>         {dropTab %W %x %y}
  bind .nb <Control-ButtonPress-1>   {dragDelay %W %x %y %X %Y}
  bind .nb <Control-ButtonRelease-1> {dropTab %W %x %y}

  # mark list bindings
  foreach keysym [list <Return> <Double-ButtonRelease-1>] {
    bind .marks $keysym {markSee [.marks get active]}
  }
  bind .marks <Delete> {markDelete active}

  # search & replace combobox bindings
  foreach combobox {.cbsearch .cbreplace} {
    bind $combobox <ButtonPress-3> {focus %W; tk_popup .menusearch %X %Y}
    bind $combobox <Escape> {.menu.search invoke "Show Search"}
  }
  bind .cbreplace <Return> {.breplace invoke}
  bind .cbsearch  <Return> {.bfindnext invoke}
  bind .cbsearch <<ComboboxSelected>> {.bfindnext invoke}
}

################################################################################
# MAIN PROGRAM
#
createWidgets
createMenus
createBindings
startBrowser

# window manager instructions
wm title    . "tEdit"
wm minsize  . 460 300
wm protocol . WM_DELETE_WINDOW {.menu.file invoke "Close All"}

################################################################################
# COMMAND LINE
#
if {$::argc > 0} {
  foreach filename $::argv {
    if {[file exists $filename]} {
        openFile $filename
      } else {
        newTab "" $filename
      }
    }
  if {[llength [.nb tabs]] == 0} {exit 1}
} else {
  newTab
}
