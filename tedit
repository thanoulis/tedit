#!/usr/bin/env tclsh

package require Tk
# force utf-8 encoding (freewrap workaround)
if {[encoding system] ne "utf-8"} {encoding system "utf-8"}

################################################################################
# VARIABLES
#
namespace eval tEdit {
  array set filename   {}
  array set folds      {}
  array set marks      {}
  array set marknum    {}
  array set modified   {}

  variable version     {1.7.11}
  variable safe        [interp create -safe]
  variable filepath    {}
  variable message     {}
  variable encoding    [encoding system]
  variable tabnum      0
  variable untitlednum 1
  variable savename    {}
  variable recent      [list]
  variable filetypes   {{{All Files} {*}}
    {{Text Files} {*.txt *.TXT}} {{Log Files} {*.log *.LOG}}
    {{C Files} {*.c *.C}} {{C++ Files} {*.cpp *.CPP}} {{Header Files} {*.h *.H}}
    {{Go Files} {*.go *.GO}}
    {{Perl Files} {*.pl *.PL}} {{Perl Modules} {*.pm *.PM}}
    {{Python Files} {*.py *.PY}}
    {{Ruby Files} {*.rb *.RB}}
    {{Rust Files} {*.rs *.RS}}
    {{Tcl Files} {*.tcl *.TCL}}
  }
  variable goto        {}
  variable hgoto       [list]
  variable showgoto    {false}
  variable blockselect [list]
  variable blockpaste  {false}
  variable search      {}
  variable hsearch     [list]
  variable regexp      {-exact}
  variable replace     {}
  variable hreplace    [list]
  variable showsearch  {false}
  variable showreplace {false}
  variable showmarks   {false}
  variable browser     {false}
  variable linenumbers {true}
  variable showmenu    {.menu}
  variable showstatus  {true}
  variable showyscroll {true}
  variable showxscroll {true}
  variable ontop       {false}
  variable precision   3
  variable autoindent  {true}
  variable wrap        {none}
  variable blinkcursor 500
  variable blockcursor {false}
  variable textfont    {TkFixedFont}
  variable spacing1    0
  variable spacing2    0
  variable spacing3    0
  variable colorscheme {default}
  variable theme       [ttk::style theme use]
  variable tabsize     2
  variable softtabs    {true}

  namespace eval DnD {
    variable timer {}
    variable start {}
  }
}
# add precision and math functions
# for use with [tEdit::Calculate]
namespace eval tcl::mathfunc {
  proc precision {number precision} {
    expr {double(round(10 ** $precision * $number)) / 10 ** $precision}
  }
  # e = exp(1)
  proc e {} {return 2.718281828459045}
  # π = acos(-1)
  proc pi {} {return 3.141592653589793}
  # φ = (1+sqrt(5))/2
  proc phi {} {return 1.618033988749895}
  # trigonometric functions with degrees
  proc sind  {x} {expr {sin($x * pi() / 180)}}
  proc cosd  {x} {expr {cos($x * pi() / 180)}}
  proc tand  {x} {expr {tan($x * pi() / 180)}}
  proc asind {x} {expr {asin($x) * 180 / pi()}}
  proc acosd {x} {expr {acos($x) * 180 / pi()}}
  proc atand {x} {expr {atan($x) * 180 / pi()}}
  # teach safe interpreter the new functions
  foreach function [info procs [namespace current]::*] {
    $tEdit::safe alias $function $function
  }
  # use ln() instead of log()
  $tEdit::safe alias [namespace current]::ln  [namespace current]::log
  # use log() instead of log10()
  $tEdit::safe alias [namespace current]::log [namespace current]::log10
}

################################################################################
# PROCEDURES
#
proc tEdit::Message {msg {timer 5000}} {
  after cancel {set tEdit::message ""}
  set tEdit::message $msg
  after $timer {set tEdit::message ""}
}

proc tEdit::RecentAdd {filename} {
  if {$filename ni $tEdit::recent} {
    lappend tEdit::recent $filename
    .menu.file entryconfigure "Recent Files" -state normal
    .menu.file.recent add command -label $filename -command [list tEdit::OpenFile $filename]
  }
}

proc tEdit::Modified {text} {
  set tEdit::modified(text) [expr {[$text edit modified] ? "\u2022" : ""}]
}

proc tEdit::NewTab {{position ""} {filename ""}} {
  set nb .nb
  set tabnum $tEdit::tabnum
  # set array for tabbed widgets
  array set tab [list \
    {tab}      "${nb}.tab${tabnum}"\
    {canvas}   "${nb}.tab${tabnum}.canvas"\
    {text}     "${nb}.tab${tabnum}.text"\
    {yscroll}  "${nb}.tab${tabnum}.yscroll"\
    {xscroll}  "${nb}.tab${tabnum}.xscroll"\
    {modified} "${nb}.tab${tabnum}.modified"\
  ]
  # set arrays specific to this tab
  array set tEdit::filename [list $tab(tab) $filename]
  array set tEdit::folds    [list $tab(text) [list]]
  array set tEdit::marks    [list $tab(text) [list]]
  array set tEdit::marknum  [list $tab(text) 0]
  array set tEdit::modified [list $tab(text) ""]
  # increase tab number for future use
  incr tEdit::tabnum

  ttk::frame $tab(tab)
    tk::canvas $tab(canvas) -width 10 -highlightthickness 0 -background "#FFFF00"
    tk::text $tab(text) -relief sunken -highlightthickness 0 -takefocus 1 \
      -font $tEdit::textfont -undo true -maxundo 0 -autoseparators true \
      -insertunfocussed hollow -wrap $tEdit::wrap \
      -tabstyle wordprocessor -tabs $tEdit::tabsize \
      -blockcursor $tEdit::blockcursor -insertofftime $tEdit::blinkcursor \
      -spacing1 $tEdit::spacing1 -spacing2 $tEdit::spacing2 -spacing3 $tEdit::spacing3 \
      -xscrollcommand [list $tab(xscroll) set] -yscrollcommand [list $tab(yscroll) set]
      # text tags management and starting colors
      $tab(text) tag configure tag_search     -foreground "#FFFF00" -background "#000000"
      $tab(text) tag configure tag_search_all -foreground "#000000" -background "#FFFF00"
      $tab(text) tag raise tag_search tag_search_all
    ttk::scrollbar $tab(yscroll) -orient vertical   -command [list $tab(text) yview]
    ttk::scrollbar $tab(xscroll) -orient horizontal -command [list $tab(text) xview]
    ttk::label $tab(modified) -textvariable tEdit::modified(text)

    grid $tab(canvas)   -in $tab(tab) -row 0 -column 0 -sticky ns
    grid $tab(text)     -in $tab(tab) -row 0 -column 1 -sticky nswe
    grid $tab(yscroll)  -in $tab(tab) -row 0 -column 2 -sticky ns
    grid $tab(xscroll)  -in $tab(tab) -row 1 -column 0 -sticky we -columnspan 2
    grid $tab(modified) -in $tab(tab) -row 1 -column 2
    grid rowconfigure    $tab(tab) $tab(text) -weight 1
    grid columnconfigure $tab(tab) $tab(text) -weight 1
    # remove canvas from view
    grid remove $tab(canvas)

  # need to disable this for Tabs Traversal
  bind $tab(text) <Control-Tab> {return 0}
  # bindings for block selections
  bind Text <Control-ButtonPress-1> {
    set tEdit::blockselect [list %x %y]
    %W mark set insert @%x,%y
    %W see insert
    break
  }
  bind $tab(text) <Control-Motion> {
    if {$tEdit::blockselect ne ""} {
      tEdit::BlockSelect %W %x %y
      %W mark set insert @%x,%y
      %W see insert
      break
    }
  }
  bind Text <Control-ButtonRelease-1> {
    tEdit::BlockSelect %W %x %y
    set tEdit::blockselect [list]
    break
  }

  if {$filename eq ""} {
    set filename "Untitled $tEdit::untitlednum"
    incr tEdit::untitlednum
  } else {
    set filename [file tail $filename]
  }
  # where to insert new tab
  if {$position eq "" || ($position + 1) >= [$nb index end]} {
    set position end
  } else {
    incr position
  }
  $nb insert $position $tab(tab) -text $filename
  tEdit::TabOptions new $tab(tab)
  $nb select $tab(tab)
  focus $tab(text)
  return $tab(text)
}

proc tEdit::CloseTab {tab {nb ".nb"}} {
  if {[llength $tab] > 1} {set tab [$nb select]}
  set text "${tab}.text"
  if {[tEdit::AskSave $tab $text] != 0} {return 2}
  $nb forget $tab
  destroy $tab
  if {[$nb index end] < 1} {exit}
}

proc tEdit::OpenFileDialog {} {
  set filenames [tk_getOpenFile -title "Open File" -parent . \
    -filetypes $tEdit::filetypes -multiple true]
  if {$filenames eq ""} {return 2}
  foreach filename $filenames {
    tEdit::OpenFile $filename
  }
}

proc tEdit::OpenFile {filename} {
  foreach tab [.nb tabs] {
    if {$filename eq $tEdit::filename($tab)} {
      .nb select $tab
      tEdit::Message "[file tail $filename] already open"
      return 1
    }
  }
  if {[file type $filename] ne "file"} {
    puts stderr "Cannot open: $filename is [file type $filename]"
    tk_messageBox -title "Cannot open file!" -icon error -type ok \
      -parent . -message "Cannot open file:" \
      -detail "${filename}\nis a [file type $filename]."
    return 1
  }
  if {[catch {set data [open $filename r]} msg]} {
    puts stderr $msg
    tEdit::Message [lindex [split $msg ":"] 1]
    return 1
  }
  chan configure $data -translation auto
  set text [tEdit::NewTab [.nb index current] $filename]
  $text insert end [chan read -nonewline $data]
  chan close $data
  $text mark set insert 0.0
  $text see insert
  $text edit modified 0
  $text edit reset
  tEdit::RecentAdd $filename
}

proc tEdit::GetPipedData {} {
  chan event stdin readable {}
  set data ""
  while {[chan gets stdin line] >= 0} {
    append data $line "\n"
  }
  set data [string range $data 0 end-1]
  if {[string length $data] > 0} {
    set text [tEdit::NewTab {} "<<STDIN>>"]
    $text insert end $data
  }
}

proc tEdit::StoreFilename {filename} {
  set tab [.nb select]
  set tEdit::filename($tab) $filename
  .nb tab $tab -text [file tail $filename]
}

proc tEdit::SaveFileDialog {} {
  set tabname [.nb tab [.nb select] -text]
  set filename [tk_getSaveFile -title "Save As" -parent . \
    -filetypes $tEdit::filetypes -initialfile $tabname]
  if {$filename eq ""} {return 2}
  if {[file exists $filename]} {
    if {[file type $filename] ne "file"} {
      puts stderr "Cannot save: $filename is [file type $filename]"
      tk_messageBox -title "Cannot save file!" -icon error -type ok \
        -parent . -message "Cannot save [file tail $filename]:" \
        -detail "$filename\nis a [file type $filename]."
      return 1
    } elseif {[file writable $filename] == 0} {
      puts stderr "Cannot save: $filename is read only"
      tk_messageBox -title "Cannot save file!" -icon error -type ok \
        -parent . -message "Cannot save [file tail $filename]:" \
        -detail "${filename}\nis read only."
      return 1
    }
  }
  set tEdit::savename $filename
  return 0
}

proc tEdit::SaveFile {filename text} {
  if {$filename eq ""} {
    if {[tEdit::SaveFileDialog] == 0} {
      set filename $tEdit::savename
    } else {
      return 2
    }
  }
  if {[catch {set data [open $filename w]} msg]} {
    puts stderr $msg
    tEdit::Message [lindex [split $msg ":"] 1]
    return 1
  }
  chan puts -nonewline $data [$text get 0.0 end]
  chan flush $data
  chan close $data
  $text edit modified 0
  tEdit::StoreFilename $filename
  tEdit::RecentAdd $filename
  tEdit::Message "[file tail $filename] saved"
  set tEdit::filepath [file nativename $filename]
  return 0
}

proc tEdit::SaveAs {text} {
  if {[tEdit::SaveFileDialog] == 0} {
    tEdit::SaveFile $tEdit::savename $text
  }
}

proc tEdit::AskSave {tab text} {
  if {[$text edit modified]} {
    set answer [tk_messageBox -title "Save file?" -icon warning -parent . \
      -type yesnocancel -default yes \
      -message "[.nb tab $tab -text] has changed!" -detail "Save changes?"]
    switch -- $answer {
      yes {
        if {$tEdit::filename($tab) eq ""} {
          if {[tEdit::SaveFileDialog] == 0} {
            return [tEdit::SaveFile $tEdit::savename $text]
          } else {
            return 2
          }
        } else {
          return [tEdit::SaveFile $tEdit::filename($tab) $text]
        }
      }
      no {return 0}
      cancel {return 2}
    }
  }
  return 0
}

proc tEdit::CloseAll {{noclose ""}} {
  foreach tab [.nb tabs] {
    # 'close others' tabs menu command
    if {$tab eq $noclose} {
      continue
    }
    .nb select $tab
    if {[tEdit::CloseTab $tab] == 2} {return 2}
  }
}

proc tEdit::UndoStack {text} {
  foreach {item action} {Undo canundo Redo canredo} {
    .menu.edit entryconfigure $item \
      -state [expr {[$text edit $action] ? "normal" : "disabled"}]
  }
}

proc tEdit::UndoRedo {text action} {
  if {[catch {$text edit $action} msg]} {
    tEdit::Message $msg
  }
}

proc tEdit::SelectAll {text} {
  if {[$text get 0.0 "end -1 indices"] eq ""} {return 1}
  $text tag add sel 0.0 "end -1 indices"
}

proc tEdit::PopulateBrowser {node {tree ".tree"}} {
  set path [$tree set $node fullpath]
  $tree delete [$tree children $node]
  if {[catch {glob -nocomplain -directory $path *} msg]} {
    tEdit::Message [lindex [split $msg ":"] 1]
    return 1
  }
  foreach f [lsort -dictionary [glob -nocomplain -directory $path *]] {
    set type [file type $f]
    set id [$tree insert $node end -text [file tail $f] \
      -values [list $f $type]]
    if {$type eq "directory"} {
      $tree insert $id 0
      $tree item $id -text [file tail $f]/
    }
  }
}

proc tEdit::StartBrowser {{tree ".tree"}} {
  foreach dir [lsort -dictionary [file volumes]] {
    tEdit::PopulateBrowser [$tree insert {} end -text $dir \
      -values [list $dir directory]] $tree
  }
}

proc tEdit::OpenFileBrowser {node {tree ".tree"}} {
  if {$node eq ""} {return 2}
  if {[$tree set $node type] eq "directory"} {
    tEdit::PopulateBrowser $node $tree
  } else {
    tEdit::OpenFile [$tree set $node fullpath]
  }
}

proc tEdit::ToggleBrowser {show} {
  if {$show eq "true"} {
    .main insert 0 .browser
  } else {
    .main forget .browser
  }
}

proc tEdit::Copy {text action} {
  if {[set selected [$text tag ranges sel]] eq ""} {return 1}
  if {[llength $selected] > 2} {
    set prev [$text index sel.first]
    foreach {first last} $selected {
      set lines [expr {$first - $prev}]
      if {$lines >= 2} {
        set length [string length [$text get $first $last]]
        for {set i 1} {$i < $lines} {incr i} {
          append data [string repeat " " $length] "\n"
        }
      }
      append data [$text get $first $last] "\n"
      if {$action eq "Cut"} {
        $text delete $first $last
      }
      set prev $first
    }
    set data [string trimright $data "\n"]
    clipboard clear
    clipboard append -type STRING -- $data
    set tEdit::blockpaste "true"
  } else {
    if {$action eq "Cut"} {
      tk_textCut $text
    } else {
      tk_textCopy $text
    }
    set tEdit::blockpaste "false"
  }
}

proc tEdit::Paste {text} {
  if {$tEdit::blockpaste eq "true"} {
    set type [expr {[tk windowingsystem] eq "x11" ? "UTF8_STRING" : "STRING"}]
    set data [split [clipboard get -type $type] "\n"]
    set cursor [$text index insert]
    set ycursor [lindex [split $cursor "."] end]
    set lastline [$text index end]
    set i 0
    foreach block $data {
      set line [expr {$cursor + $i}]
      if {$line >= $lastline} {
        $text insert end "\n"
        $text see "$cursor +${i} lines"
      }
      set eol [$text index "$line lineend"]
      set yeol [lindex [split $eol "."] end]
      set missing [expr {$ycursor - $yeol}]
      if {$missing > 0} {
        $text insert $eol [string repeat " " $missing]
      }
      $text insert "$cursor +${i} lines" $block
      incr i
    }
  } else {
    tk_textPaste $text
    $text see insert
  }
}

proc tEdit::BlockSelect {text x2 y2} {
  selection clear
  set x1 [lindex $tEdit::blockselect 0]
  set y1 [lindex $tEdit::blockselect 1]
  if {$x1 > $x2} {set x $x2;set endx $x1} else {set x $x1;set endx $x2}
  if {$y1 > $y2} {set y $y2;set endy $y1} else {set y $y1;set endy $y2}
  while {$y <= $endy} {
    $text tag add sel "@$x,$y" "@$endx,$y"
    incr y
  }
}

proc tEdit::DeleteSelection {text key} {
  if {[set selected [$text tag ranges sel]] eq ""} {
    switch -- $key {
      Delete    {$text delete "insert"}
      Backspace {$text delete "insert -1 indices"}
      default   {return 1}
    }
  } else {
    foreach {first last} $selected {
      $text delete $first $last
    }
  }
}

proc tEdit::BlockIndent {text action} {
  if {$tEdit::softtabs eq "true"} {
    set indent [string repeat " " $tEdit::tabsize]
  } else {
    set indent "\t"
  }
  # check if a selection exists
  if {[set selected [$text tag ranges sel]] eq ""} {
    foreach idx {linestart lineend} {
      lappend blockindent [$text index "insert $idx"]
    }
  } else {
    set first [expr {int([lindex $selected 0])}]
    set last [expr {int([lindex $selected end])}]
    for {set line $first} {$line <= $last} {incr line} {
      if {[$text get "${line}.0" "${line}.end"] ne ""} {
        lappend blockindent "${line}.0" "${line}.end"
      }
    }
  }
  switch -- $action {
    increase {
      foreach {first last} $blockindent {
        $text insert $first $indent
      }
      tEdit::Message "increased indentation"
    }
    decrease {
      set indent [string length $indent]
      set whitespace ""
      foreach {first last} $blockindent {
        $text search -regexp -all -count whitespace -- {^([ \t]*)} $first $last
        if {$whitespace >= $indent} {
          $text delete [$text index $first] [$text index "$first +${indent} indices"]
        } elseif {$whitespace >= 1} {
          $text delete [$text index $first] [$text index "$first +${whitespace} indices"]
        } else {
          set whitespace ""
        }
      }
      if {$whitespace eq ""} {
        tEdit::Message "cannot decrease further"
      } else {
        tEdit::Message "decreased indentation"
      }
    }
    default {
      return 1
    }
  }
}

proc tEdit::AutoIndent {text} {
  if {$tEdit::autoindent eq "true"} {
    bind $text <Return> {
      # find any whitespace at the start of the current line
      set first [%W index "insert linestart"]
      set last [%W index "insert lineend"]
      regexp {^([ \t]*)} [%W get $first $last] -> whitespace
      # create a newline, insert whitespace
      %W insert insert "\n${whitespace}"
      # if necessary, scroll the view so cursor is visible
      %W see insert
      break
    }
  } else {
    bind $text <Return> {
      %W insert insert "\n"
      %W see insert
      break
    }
  }
}

proc tEdit::Calculate {text} {
  if {[$text tag ranges sel] eq ""} {
    set first [$text index "insert linestart"]
    set last [$text index "insert lineend"]
  } else {
    set first [$text index sel.first]
    set last [$text index sel.last]
  }
  set math [$text get $first $last]
  try {
    $tEdit::safe eval [list expr [string map {/ *1.0/} $math]]
  } on error msg {
    tEdit::Message [lindex [split $msg "\n"] 0]
  } on ok result {
    # round to user defined decimal points
    set result [expr {precision($result,$tEdit::precision)}]
    # avoid printing extra decimal zeros
    set result0 [expr {round($result)}]
    if {$result0 == $result} {
      set result $result0
    }
    $text insert $last " = $result"
  }
}

proc tEdit::Fold {text} {
  if {[set selected [$text tag ranges sel]] eq ""} {
    tEdit::Message "select lines to fold"
    return 1
  }
  set first [$text index "sel.first linestart"]
  set firsteol [$text index "sel.first lineend"]
  set last [$text index "sel.last lineend"]
  set dfirst [expr {int($first)}]
  set dlast [expr {int($last)}]
  if {[set foldsum [expr {($dlast - $dfirst) + 1}]] == 1} {
    tEdit::Message "cannot fold a single line"
    return 1
  }
  # check if any older folds exist in current selection
  # and unfold them
  foreach old $tEdit::folds($text) {
    set oldtag [$text tag ranges $old]
    set oldfirst [lindex $oldtag 0]
    set oldlast [lindex $oldtag end]
    if {[$text compare $first <= $oldfirst] && [$text compare $last >= $oldlast]} {
      $old invoke
    }
  }
  # get first line to show in fold button text
  set buttontext "\u25b6\u25b6 $foldsum lines: [$text get $first $firsteol]"
  set fold [string cat $text ".fold" $dfirst "-" $dlast]
  tk::button $fold -text $buttontext -relief flat -padx 0 -pady 0 \
    -takefocus 0 -cursor "hand2" -font $tEdit::textfont \
    -background [$text cget -background] \
    -foreground [$text cget -foreground] \
    -command [list tEdit::Unfold $text $fold $first]
  $text tag add $fold $first $last
  $text tag configure $fold -elide true
  $text window create $first -window $fold
  $text mark set insert "$last +1 lines"
  selection clear
  lappend tEdit::folds($text) $fold
  .menu.edit entryconfigure "Unfold All" -state normal
}

proc tEdit::Unfold {text fold {index ""}} {
  # store modified flag, to restore it later
  set modified [$text edit modified]
  switch -- $fold {
    all {
      foreach fold $tEdit::folds($text) {
        $fold invoke
      }
    }
    default {
      $text tag configure $fold -elide false
      $text tag delete $fold
      # destroy fold button (same name with fold tag)
      destroy $fold
      # delete the extra index which held the button
      $text delete $index
      set tEdit::folds($text) \
        [lsearch -inline -all -not -exact $tEdit::folds($text) $fold]
    }
  }
  # restore modified flag ('$text delete $index' modifies $text)
  $text edit modified $modified
  if {[llength $tEdit::folds($text)] == 0} {
    .menu.edit entryconfigure "Unfold All" -state disabled
  }
}

proc tEdit::Search {what {direction "nextrange"}} {
  if {$what ni $tEdit::hsearch} {
    lappend tEdit::hsearch $what
  }
  if {[tEdit::SearchAll $what] == 1} {return 1}
  set text "[.nb select].text"
  if {$direction eq "prevrange"} {
    set newpos "insert -1 indices"
    set loop [list end-1 end]
  } else {
    set newpos "insert +1 indices"
    set loop [list 0 1]
  }
  set taglist [$text tag ranges tag_search_all]
  set lastsearch [$text tag ranges tag_search]
  set tagsearch [$text tag $direction tag_search_all insert]
  # if same search, move insert by one
  if {$tagsearch eq $lastsearch} {
    set tagsearch [$text tag $direction tag_search_all $newpos]
  }
  # if search returns null, search from top/bottom
  if {$tagsearch eq ""}  {
    set tagsearch [lrange $taglist {*}$loop]
  }
  tEdit::ClearHighlight "tag_search"
  $text tag add tag_search {*}$tagsearch
  $text mark set insert tag_search.first
  $text see tag_search.first
  set sum [expr {[llength $taglist] / 2}]
  set count [lsearch -exact $taglist [lindex $tagsearch 0]]
  set count [expr {($count / 2) + 1}]
  set matches [expr {$sum == 1 ? "match" : "matches"}]
  tEdit::Message "$count of $sum $matches"
}

proc tEdit::SearchAll {what} {
  if {$what eq ""} {
    tEdit::Message "nothing to search for"
    return 1
  }
  set text "[.nb select].text"
  # search only in selection if exists
  if {[$text tag ranges sel] ne ""} {
    set first "sel.first"
    set last "sel.last"
  } else {
    set first "0.0"
    set last "end"
  }
  set length 0
  set search_cmd [list $text search $tEdit::regexp -all -count length -- $what $first $last]
  if {[catch {set taglist [{*}$search_cmd]} msg]} {
    .cbsearch configure -style error.TCombobox
    tEdit::Message [lindex [split $msg ":"] 1]
    return 1
  } elseif {$taglist eq ""} {
    .cbsearch configure -style error.TCombobox
    tEdit::Message "no matches found"
    return 1
  } else {
    tEdit::ClearHighlight "tag_search_all"
    .cbsearch configure -style valid.TCombobox
    set count 0
    foreach first $taglist {
      set last "$first +[lindex $length $count] indices"
      $text tag add tag_search_all $first $last
      incr count
    }
  }
}

proc tEdit::Replace {what with} {
  if {$with ni $tEdit::hreplace} {
    lappend tEdit::hreplace $with
  }
  if {$what eq $with} {
    tEdit::Message "search and replace are same"
    return 1
  }
  set text "[.nb select].text"
  # if tag_search is empty, search for the first time
  if {[set taglist [$text tag ranges tag_search]] eq ""} {
    if {[tEdit::Search $what] == 1} {
      tEdit::Message "nothing to replace"
      return 1
    }
    # recreate $taglist after search
    set taglist [$text tag ranges tag_search]
  }
  $text edit separator
  $text replace {*}$taglist $with
  tEdit::Search $what
}

proc tEdit::ReplaceAll {what with} {
  if {$with ni $tEdit::hreplace} {
    lappend tEdit::hreplace $with
  }
  if {$what eq $with} {
    tEdit::Message "search and replace are same"
    return 1
  }
  if {[tEdit::SearchAll $what] == 1} {
    tEdit::Message "nothing to replace"
    return 1
  }
  set text "[.nb select].text"
  set taglist [$text tag ranges tag_search_all]
  $text edit separator
  set count 0
  foreach {first last} $taglist {
    $text replace $first $last $with
    incr count
  }
  tEdit::Message "replace finished: $count substitutions"
}

proc tEdit::ClearHighlight {tags} {
  set text "[.nb select].text"
  foreach tag $tags {
    foreach {first last} [$text tag ranges $tag] {
      $text tag remove $tag $first $last
    }
  }
}

proc tEdit::MarkToggle {} {
  set text "[.nb select].text"
  set first [$text index "insert linestart"]
  set last [$text index "insert lineend"]
  set mark [lsearch -inline -all -glob [$text tag names $first] "Mark#*"]
  if {$mark eq ""} {
    if {[$text get $first $last] eq ""} {
      tEdit::Message "cannot mark: empty line"
      return 1
    }
    set mark "Mark#[incr tEdit::marknum($text)]"
    $text mark set $mark $first
    $text tag configure $mark -underline true
    $text tag raise $mark sel
    $text tag add $mark $first $last
    lappend tEdit::marks($text) $mark
    foreach item {"Next Mark" "Clear Marks"} {
      .menu.marks entryconfigure $item -state normal
    }
  } else {
    tEdit::MarkDelete $mark
  }
}

proc tEdit::MarkSee {mark} {
  set text "[.nb select].text"
  if {$mark eq ""} {return 1}
  $text mark set insert $mark
  $text see $mark
  focus $text
}

proc tEdit::MarkNext {markbox} {
  set text "[.nb select].text"
  if {[llength $tEdit::marks($text)] == 0} {
    tEdit::Message "no marks found"
    return 1
  }
  set mark [$text mark next "insert +1 indices"]
  while {$mark ni $tEdit::marks($text)} {
    if {$mark eq ""} {set mark 0.0}
    set mark [$text mark next $mark]
  }
  set index [lsearch -exact $tEdit::marks($text) $mark]
  $markbox selection clear 0 end
  $markbox selection set $index
  $markbox activate $index
  $text mark set insert $mark
  $text see $mark
}

proc tEdit::MarkDelete {which} {
  set text "[.nb select].text"
  set markbox .marks
  switch -- $which {
    all {
      foreach mark $tEdit::marks($text) {
        $text mark unset $mark
        $text tag delete $mark
      }
      set tEdit::marks($text) [list]
      set tEdit::marknum($text) 0
    }
    active {
      set mark [$markbox get active]
      $text mark unset $mark
      $text tag delete $mark
      $markbox delete active
    }
    default {
      $text mark unset $which
      $text tag delete $which
      $markbox delete [lsearch -exact $tEdit::marks($text) $which]
    }
  }
  if {[llength $tEdit::marks($text)] == 0} {
    foreach item {"Next Mark" "Clear Marks"} {
      .menu.marks entryconfigure $item -state disabled
    }
  }
}

proc tEdit::GotoLine {text line} {
  if {$line eq ""} {return 1}
  # $line is always digit, from combobox validation
  if {$line ni $tEdit::hgoto} {
    lappend tEdit::hgoto $line
  }
  if {$line <= [$text index "end -1 indices"]} {
    set mark "${line}.0"
    $text mark set insert $mark
    $text see $mark
    .cbgoto configure -style valid.TCombobox
    tEdit::Message "gone to line $line"
  } else {
    .cbgoto configure -style error.TCombobox
    tEdit::Message "line $line does not exist"
  }
}

proc tEdit::LineNumbers {text canvas args} {
  set checklist "configure delete insert see yview"
  # canvas font don't need italics, underline or overstrike
  # family and size are enough
  set font [lrange $tEdit::textfont 0 1]
  # check only for items in checklist and elide tags
  # $args == 0 when opening a file
  if {[llength $args] == 0 || [lindex $args 0 1] in $checklist \
    || [lindex $args 0 4] eq "-elide"} {
    $canvas delete all
    set i [$text index @0,0]
    while true {
      set dline [$text dlineinfo $i]
      if {[llength $dline] == 0} {break}
      set height [lindex $dline 3]
      set y [expr {[lindex $dline 1] + $tEdit::spacing1}]
      set linenum [lindex [split $i "."] 0]
      if {$linenum > 999} {
        set width [expr {[font measure $tEdit::textfont $linenum] + 5}]
      } else {
        set width [expr {[font measure $tEdit::textfont "000"] + 5}]
      }
      $canvas configure -width $width
      $canvas create text 2 $y -anchor nw -text $linenum \
        -font $font -fill [$text cget -foreground]
      set i [$text index "$i +1 lines linestart"]
    }
  }
}

proc tEdit::ToggleLineNumbers {text canvas show} {
  if {$show eq "true"} {
    bind $text <Configure> [list tEdit::LineNumbers $text $canvas]
    if {[trace info execution $text] eq ""} {
      trace add execution $text leave [list tEdit::LineNumbers $text $canvas]
    }
    grid $canvas
  } else {
    bind $text <Configure> {return 0}
    trace remove execution $text leave [list tEdit::LineNumbers $text $canvas]
    grid remove $canvas
  }
}

proc tEdit::ToggleView {widget show} {
  if {$show eq "false"} {
    grid remove $widget
    switch -- $widget {
      .lfreplace {focus .cbsearch}
      default    {focus [.nb select].text}
    }
  } else {
    grid $widget
    switch -- $widget {
      .fgoto     {focus .cbgoto}
      .fsearch   {focus .cbsearch}
      .lfreplace {focus .cbreplace}
      default    {focus [.nb select].text}
    }
  }
}

proc tEdit::ToggleSoftTabs {text} {
  if {$tEdit::softtabs eq "true"} {
    set tabstring [string repeat " " $tEdit::tabsize]
  } else {
    set tabstring "\t"
  }
  bind $text <Tab> [list $text insert insert $tabstring]
  tEdit::ConfigureTabSize $text
}

proc tEdit::ConfigureTabSize {text} {
  $text configure -tabs "[expr {$tEdit::tabsize * [font measure $tEdit::textfont 0]}] left"
}

proc tEdit::SetFont {font} {
  set tEdit::textfont $font
  foreach tab [.nb tabs] {
    set text "${tab}.text"
    $text configure -font $font
    tEdit::ConfigureTabSize $text
    if {$tEdit::folds($text) ne ""} {
      foreach fold $tEdit::folds($text) {
        $fold configure -font $font
      }
    }
  }
}

proc tEdit::SelectFont {text} {
  tk fontchooser configure -title "Select Font" -parent . \
    -font [$text cget -font] -command {tEdit::SetFont}
  tk fontchooser show
}

proc tEdit::ColorScheme {text canvas colorscheme} {
  switch -- $colorscheme {
    amber      {array set color {fg "#FFBF00" bg "#000000" hl "#0000FF"}}
    black      {array set color {fg "#C0C0C0" bg "#000000" hl "#0000FF"}}
    blue       {array set color {fg "#FFFF00" bg "#0000FF" hl "#444444"}}
    brownsugar {array set color {fg "#FF9999" bg "#472400" hl "#000000"}}
    gray       {array set color {fg "#D6D6D6" bg "#4E4E4E" hl "#0000FF"}}
    green      {array set color {fg "#00FF00" bg "#000000" hl "#0000FF"}}
    salmon     {array set color {fg "#222200" bg "#CA607B" hl "#DED494"}}
    sugar      {array set color {fg "#000000" bg "#EEEFDF" hl "#BEBFB2"}}
    default    {array set color {fg "#000000" bg "#FFFFFF" hl "#FFFF00"}}
  }
  $canvas configure -background $color(hl)
  $text configure -foreground $color(fg)
  $text configure -background $color(bg)
  $text configure -insertbackground $color(fg)
  $text tag configure tag_search -foreground $color(hl) -background $color(fg)
  $text tag configure tag_search_all -foreground $color(fg) -background $color(hl)
  if {$tEdit::folds($text) ne ""} {
    foreach fold $tEdit::folds($text) {
      $fold configure -background $color(bg)
      $fold configure -foreground $color(fg)
    }
  }
}

proc tEdit::Base64Encode {} {
  set filename [file nativename [tk_getOpenFile -title "Select File to Encode" \
    -parent . -multiple no]]
  if {$filename eq ""} {return 2}
  if {[file type $filename] ne "file"} {
    puts stderr "Cannot open: $filename is [file type $filename]"
    tk_messageBox -title "Cannot open file!" -icon error -type ok -parent . \
      -message "Cannot open file:" \
      -detail "${filename}\nis a [file type $filename]."
    return 1
  }
  if {[catch {set data [open $filename r]} msg]} {
    puts stderr $msg
    tEdit::Message [lindex [split $msg ":"] 1]
    return 1
  }
  chan configure $data -translation binary
  set encoded [binary encode base64 -maxlen 75 [chan read -nonewline $data]]
  chan close $data
  set text [tEdit::NewTab [.nb index current] "${filename}.b64"]
  $text insert end $encoded
  $text mark set insert 0.0
  $text see insert
  $text edit modified 0
  $text edit reset
  tEdit::Message "Encoding finished"
}

proc tEdit::TabOptions {arg {tab ""}} {
  if {$arg eq "new" && $tab ne ""} {
    set text "${tab}.text"
    set canvas "${tab}.canvas"
    tEdit::ToggleLineNumbers $text $canvas $tEdit::linenumbers
    tEdit::ToggleView "${tab}.yscroll" $tEdit::showyscroll
    tEdit::ToggleView "${tab}.xscroll" $tEdit::showxscroll
    tEdit::AutoIndent $text
    tEdit::ColorScheme $text $canvas $tEdit::colorscheme
    tEdit::ToggleSoftTabs $text
  } else {
    foreach tab [.nb tabs] {
      set text "${tab}.text"
      set canvas "${tab}.canvas"
      switch -- $arg {
        LineNumbers {tEdit::ToggleLineNumbers $text $canvas $tEdit::linenumbers}
        YScroll     {tEdit::ToggleView "${tab}.yscroll" $tEdit::showyscroll}
        XScroll     {tEdit::ToggleView "${tab}.xscroll" $tEdit::showxscroll}
        Indent      {tEdit::AutoIndent $text}
        WordWrap    {$text configure -wrap $tEdit::wrap}
        BlinkCursor {$text configure -insertofftime $tEdit::blinkcursor}
        BlockCursor {$text configure -blockcursor $tEdit::blockcursor}
        Spacing1    {$text configure -spacing1 $tEdit::spacing1}
        Spacing2    {$text configure -spacing2 $tEdit::spacing2}
        Spacing3    {$text configure -spacing3 $tEdit::spacing3}
        ColorScheme {tEdit::ColorScheme $text $canvas $tEdit::colorscheme}
        TabKey      {tEdit::ToggleSoftTabs $text}
        default     {return 1}
      }
    }
  }
}

proc tEdit::FocusTab {tab} {
  # remove any leftover message
  set tEdit::message ""
  set tEdit::filepath [file nativename $tEdit::filename($tab)]
  set text "${tab}.text"
  tEdit::UndoStack $text
  tEdit::Modified $text
  # set "Unfold all" menu state
  .menu.edit entryconfigure "Unfold All" \
    -state [expr {$tEdit::folds($text) eq "" ? "disabled" : "normal"}]
  # set "Next Mark" & "Clear Marks" menu state
  .marks configure -listvariable tEdit::marks($text)
  foreach item {"Next Mark" "Clear Marks"} {
    .menu.marks entryconfigure $item \
      -state [expr {$tEdit::marks($text) eq "" ? "disabled" : "normal"}]
  }
}

proc tEdit::TabsMenu {W x y X Y} {
  .menutabs.goto delete 0 end
  .menutabs delete 0 2
  .menutabs insert 0 command -label "New Tab" -underline 4 \
    -command [list tEdit::NewTab [lindex [$W index @${x},${y}]]]
  .menutabs insert 1 command -label "Close Tab" -underline 0 \
    -command [list tEdit::CloseTab [lindex [$W tabs] [$W index @${x},${y}]]]
  .menutabs insert 2 command -label "Close Others" -underline 6 \
    -command [list tEdit::CloseAll [lindex [$W tabs] [$W index @${x},${y}]]]
  foreach tabid [$W tabs] {
    set tabname [$W tab $tabid -text]
    .menutabs.goto add command -label $tabname -command [list $W select $tabid]
  }
  tk_popup .menutabs $X $Y
}

proc tEdit::NextTab {{nb ".nb"}} {
  set tabid [$nb index current]
  if {[incr tabid] >= [$nb index end]} {set tabid 0}
  $nb select $tabid
}

proc tEdit::PrevTab {{nb ".nb"}} {
  set tabid [$nb index current]
  if {[incr tabid -1] < 0} {set tabid [expr {[$nb index end] - 1}]}
  $nb select $tabid
}

proc tEdit::DnD::DragDelay {W x y X Y} {
  set tEdit::DnD::timer [list tEdit::DnD::DragTab $W $x $y $X $Y]
  after 200 $tEdit::DnD::timer
}

proc tEdit::DnD::DragTab {W x y X Y} {
  set tEdit::DnD::timer ""
  set tEdit::DnD::start [$W index @$x,$y]
  # check for a valid start
  if {[string is integer -strict $tEdit::DnD::start]} {
    # create window to show when drag
    set tabid [lindex [$W tabs] [$W index @$x,$y]]
    set tabtext [$W tab $tabid -text]
    toplevel .dnd
    tk::label .dnd.tabname -relief raised -padx 5 -pady 5 \
      -background "white" -text $tabtext
    pack .dnd.tabname -in .dnd -expand true -fill both
    wm resizable .dnd 0 0
    wm geometry .dnd "+${X}+${Y}"
    wm overrideredirect .dnd 1
    wm attributes .dnd -topmost true
    bind $W <Motion> {tEdit::DnD::MoveTab %W %x %y %X %Y}
    $W configure -cursor "hand2"
  }
}

proc tEdit::DnD::DropTab {W x y} {
  focus [.nb select].text
  if {$tEdit::DnD::timer ne ""} {
    after cancel $tEdit::DnD::timer
    return 0
  }
  $W configure -cursor "left_ptr"
  set from $tEdit::DnD::start
  # check for a valid source
  if {[string is integer -strict $from]} {
    set to [$W index @$x,$y]
    # check for a valid destination
    if {[string is integer -strict $to]} {
      set tab [lindex [$W tabs] $from]
      $W insert $to $tab
    }
  }
  set tEdit::DnD::start ""
  bind $W <Motion> {return 0}
  destroy .dnd
}

proc tEdit::DnD::MoveTab {W x y X Y} {
  if {[winfo exists .dnd]} {
    # check for valid path
    set to [$W index @$x,$y]
    if {[string is integer -strict $to]} {
      wm geometry .dnd "+${X}+${Y}"
    }
  }
}

proc tEdit::DnD::CancelDnD {W} {
  if {[winfo exists .dnd]} {
    $W configure -cursor "left_ptr"
    set tEdit::DnD::start ""
    bind $W <Motion> {return 0}
    destroy .dnd
  }
}

proc tEdit::SystemDetails {} {
  tk_messageBox -title "System Information" -icon info -type ok -parent . \
    -message "Tcl/Tk Version: [info patchlevel]" \
    -detail "\
      User Name:\t${::tcl_platform(user)}\n\
      Hostname:\t[info hostname]\n\
      OS Family:\t${::tcl_platform(platform)}\n\
      OS Identifier:\t${::tcl_platform(os)}\n\
      OS Version:\t${::tcl_platform(osVersion)}\n\
      Architecture:\t${::tcl_platform(machine)}\n\
      Window System:\t[tk windowingsystem]\n\
      Encoding:\t[encoding system]"
}

proc tEdit::About {version} {
  tk_messageBox -title "About tEdit" -icon info -type ok -parent . \
    -message "tEdit $version" -detail \
{A simple tabbed text editor,
written in core Tcl/Tk.

MIT License

Copyright © Thanos Zygouris
<athanasios.zygouris@gmail.com>}
}

################################################################################
# MENUS
#
proc tEdit::Menus {} {
  option add *tearOff false
  . configure -menu [menu .menu]
  .menu add cascade -label "File" -underline 0 -menu [menu .menu.file]
    .menu.file add command -label "New Tab" -underline 0 \
      -accelerator "Ctrl+N" -command {tEdit::NewTab [.nb index current]}
    .menu.file add command -label "Close Tab" -underline 0 \
      -accelerator "Ctrl+F4" -command {tEdit::CloseTab [.nb select]}
    .menu.file add separator
    .menu.file add command -label "Open..." -underline 0 \
      -accelerator "Ctrl+O" -command {tEdit::OpenFileDialog}
    .menu.file add command -label "Save" -underline 0 \
      -accelerator "Ctrl+S" \
      -command {tEdit::SaveFile $tEdit::filename([.nb select]) [.nb select].text}
    .menu.file add command -label "Save As..." -underline 5 \
      -accelerator "Ctrl+Shift+S" -command {tEdit::SaveAs [.nb select].text}
    .menu.file add separator
      .menu.file add cascade -label "Recent Files" -underline 0 \
        -state disabled -menu [menu .menu.file.recent]
    .menu.file add separator
    .menu.file add command -label "Base64 Encode..." -underline 0 \
      -command {tEdit::Base64Encode}
    .menu.file add separator
    .menu.file add command -label "Close All" -underline 1 \
      -accelerator "Ctrl+Q" -command {tEdit::CloseAll}
    .menu.file add command -label "Exit" -underline 1 \
      -accelerator "Ctrl+Shift+Q" -command {exit}
  .menu add cascade -label "Edit" -underline 0 -menu [menu .menu.edit]
    .menu.edit add command -label "Increase Indent" -underline 0 \
      -accelerator "Ctrl+I" -command {tEdit::BlockIndent [.nb select].text "increase"}
    .menu.edit add command -label "Decrease Indent" -underline 0 \
      -accelerator "Ctrl+U" -command {tEdit::BlockIndent [.nb select].text "decrease"}
    .menu.edit add separator
    .menu.edit add command -label "Undo" -underline 0 \
      -accelerator "Ctrl+Z" -command {tEdit::UndoRedo [.nb select].text "undo"}
    .menu.edit add command -label "Redo" -underline 0 \
      -accelerator "Ctrl+Shift+Z" -command {tEdit::UndoRedo [.nb select].text "redo"}
    .menu.edit add separator
    .menu.edit add command -label "Cut" -underline 2 \
      -accelerator "Ctrl+X" -command {tEdit::Copy [.nb select].text "Cut"}
    .menu.edit add command -label "Copy" -underline 0 \
      -accelerator "Ctrl+C" -command {tEdit::Copy [.nb select].text "Copy"}
    .menu.edit add command -label "Paste" -underline 0 \
      -accelerator "Ctrl+V" -command {tEdit::Paste [.nb select].text}
    .menu.edit add separator
    .menu.edit add command -label "Select All" -underline 7 \
      -accelerator "Ctrl+A" -command {tEdit::SelectAll [.nb select].text}
    .menu.edit add separator
    .menu.edit add command -label "Fold Lines" -underline 0 \
      -accelerator "Ctrl+J" -command {tEdit::Fold [.nb select].text}
    .menu.edit add command -label "Unfold All" -underline 1 \
      -accelerator "Ctrl+Shift+J" -command {tEdit::Unfold [.nb select].text "all"}
    .menu.edit add separator
    .menu.edit add command -label "Calculate" -underline 8 \
      -accelerator "Ctrl+E" -command {tEdit::Calculate [.nb select].text}
  .menu add cascade -label "Search" -underline 0 -menu [menu .menu.search]
    .menu.search add checkbutton -label "Show Search" -underline 0 \
      -accelerator "Ctrl+F" \
      -variable tEdit::showsearch -onvalue "true" -offvalue "false" \
      -command {tEdit::ToggleView .fsearch $tEdit::showsearch}
    .menu.search add command -label "Find Next" -underline 5 \
      -accelerator "F3" -command {tEdit::Search $tEdit::search "nextrange"}
    .menu.search add command -label "Find Prev" -underline 5 \
      -accelerator "Shift+F3" -command {tEdit::Search $tEdit::search "prevrange"}
    .menu.search add command -label "Clear Highlight" -underline 0 \
      -accelerator "Ctrl+L" \
      -command {tEdit::ClearHighlight "tag_search tag_search_all"}
  .menu add cascade -label "Marks" -underline 0 -menu [menu .menu.marks]
    .menu.marks add checkbutton -label "Show Marks" -underline 0 \
      -accelerator "Shift+F5" \
      -variable tEdit::showmarks -onvalue "true" -offvalue "false" \
      -command {tEdit::ToggleView .fmarks $tEdit::showmarks}
    .menu.marks add command -label "Mark Toggle" -underline 0 \
      -accelerator "Ctrl+M" -command {tEdit::MarkToggle}
    .menu.marks add command -label "Next Mark" -underline 0 \
      -accelerator "F5" -state disabled -command {tEdit::MarkNext .marks}
    .menu.marks add command -label "Clear Marks" -underline 0 \
      -accelerator "Ctrl+Shift+M" -state disabled -command {tEdit::MarkDelete "all"}
  .menu add cascade -label "Show" -underline 3 -menu [menu .menu.show]
    .menu.show add checkbutton -label "File Browser" -underline 0 \
      -accelerator "F2" \
      -variable tEdit::browser -onvalue "true" -offvalue "false" \
      -command {tEdit::ToggleBrowser $tEdit::browser}
    .menu.show add separator
    .menu.show add checkbutton -label "Line Numbers" -underline 5 \
      -variable tEdit::linenumbers -onvalue "true" -offvalue "false" \
      -command {tEdit::TabOptions "LineNumbers"}
    .menu.show add separator
    .menu.show add checkbutton -label "Menu Bar" -underline 0 \
      -variable tEdit::showmenu -onvalue ".menu" -offvalue "" \
      -command {. configure -menu $tEdit::showmenu}
    .menu.show add checkbutton -label "Status Bar" -underline 7 \
      -variable tEdit::showstatus -onvalue "true" -offvalue "false" \
      -command {tEdit::ToggleView .statusbar $tEdit::showstatus}
    .menu.show add checkbutton -label "Vertical Scrollbar" -underline 0 \
      -variable tEdit::showyscroll -onvalue "true" -offvalue "false" \
      -command {tEdit::TabOptions "YScroll"}
    .menu.show add checkbutton -label "Horizontal Scrollbar" -underline 0 \
      -variable tEdit::showxscroll -onvalue "true" -offvalue "false" \
      -command {tEdit::TabOptions "XScroll"}
    .menu.show add separator
    .menu.show add checkbutton -label "Go to line" -underline 0 \
      -accelerator "Ctrl+G" \
      -variable tEdit::showgoto -onvalue "true" -offvalue "false" \
      -command {tEdit::ToggleView .fgoto $tEdit::showgoto}
  .menu add cascade -label "Options" -underline 0 -menu [menu .menu.options]
    .menu.options add checkbutton -label "On Top" -underline 0 \
      -variable tEdit::ontop -onvalue "true" -offvalue "false" \
      -command {wm attributes . -topmost $tEdit::ontop}
    .menu.options add separator
    .menu.options add cascade -label "Precision" -underline 0 \
      -menu [menu .menu.options.precision]
      for {set i 0} {$i <= 15} {incr i} {
        .menu.options.precision add radiobutton -label $i \
          -variable tEdit::precision -value $i
      }
    .menu.options add separator
    .menu.options add checkbutton -label "Autoindent" -underline 0 \
      -variable tEdit::autoindent -onvalue "true" -offvalue "false" \
      -command {tEdit::TabOptions "Indent"}
    .menu.options add checkbutton -label "Word Wrap" -underline 5 \
      -variable tEdit::wrap -onvalue "word" -offvalue "none" \
      -command {tEdit::TabOptions "WordWrap"}
    .menu.options add separator
    .menu.options add checkbutton -label "Blink Cursor" -underline 0 \
      -variable tEdit::blinkcursor -onvalue "500" -offvalue "0" \
      -command {tEdit::TabOptions "BlinkCursor"}
    .menu.options add checkbutton -label "Block Cursor" -underline 4 \
      -variable tEdit::blockcursor -onvalue "true" -offvalue "false" \
      -command {tEdit::TabOptions "BlockCursor"}
    .menu.options add separator
    .menu.options add command -label "Select Font..." -underline 7 \
      -command {tEdit::SelectFont "[.nb select].text"}
    .menu.options add cascade -label "Line Spacing" -underline 0 \
      -menu [menu .menu.options.spacing]
      .menu.options.spacing add cascade -label "Above Lines" -underline 0 \
        -menu [menu .menu.options.spacing.1]
        for {set i 0} {$i <= 9} {incr i} {
          .menu.options.spacing.1 add radiobutton -label $i -underline 0 \
            -variable tEdit::spacing1 -value $i \
            -command {tEdit::TabOptions "Spacing1"}
        }
      .menu.options.spacing add cascade -label "Below Lines" -underline 0 \
        -menu [menu .menu.options.spacing.3]
        for {set i 0} {$i <= 9} {incr i} {
          .menu.options.spacing.3 add radiobutton -label $i -underline 0 \
            -variable tEdit::spacing3 -value $i \
            -command {tEdit::TabOptions "Spacing3"}
        }
      .menu.options.spacing add cascade -label "Between Wraps" -underline 8 \
        -menu [menu .menu.options.spacing.2]
        for {set i 0} {$i <= 9} {incr i} {
          .menu.options.spacing.2 add radiobutton -label $i -underline 0 \
            -variable tEdit::spacing2 -value $i \
            -command {tEdit::TabOptions "Spacing2"}
        }
    .menu.options add separator
    .menu.options add cascade -label "Theme" -underline 3 \
      -menu [menu .menu.options.themes]
      foreach theme [ttk::style theme names] {
        .menu.options.themes add radiobutton -label $theme \
          -variable tEdit::theme -value $theme \
          -command [list ttk::style theme use $theme]
      }
    .menu.options add cascade -label "Colorscheme" -underline 0 \
      -menu [menu .menu.options.colorscheme]
      foreach colorscheme {amber black blue brownsugar default gray green salmon sugar} {
        .menu.options.colorscheme add radiobutton -label $colorscheme \
          -variable tEdit::colorscheme -value $colorscheme \
          -command {tEdit::TabOptions "ColorScheme"}
      }
    .menu.options add separator
    .menu.options add cascade -label "Tab Size" -underline 0 \
      -menu [menu .menu.options.tabsize]
      foreach i [list 2 4 6 7 8] {
        .menu.options.tabsize add radiobutton -label $i -underline 0 \
          -variable tEdit::tabsize -value $i \
          -command {tEdit::TabOptions "TabKey"}
      }
    .menu.options add checkbutton -label "Soft Tabs" -underline 0 \
      -variable tEdit::softtabs -onvalue "true" -offvalue "false" \
      -command {tEdit::TabOptions "TabKey"}
  .menu add cascade -label "Help" -underline 0 -menu [menu .menu.help]
    .menu.help add command -label "System..." -underline 0 \
      -command {tEdit::SystemDetails}
    .menu.help add separator
    .menu.help add command -label "About tEdit..." -underline 0 \
      -accelerator "F1" -command {tEdit::About $tEdit::version}

  # popup menu for managing tabs
  # dummy labels will be replaced after tEdit::TabsMenu proc
  menu .menutabs
    .menutabs add command -label "New Tab - Dummy Label"
    .menutabs add command -label "Close Tab - Dummy Label"
    .menutabs add command -label "Close Others - Dummy Label"
    .menutabs add separator
    .menutabs add cascade -label "Go To" -underline 0 -menu [menu .menutabs.goto]
    .menutabs add separator
    .menutabs add command -label "Close All" -underline 6 \
      -command {.menu.file invoke "Close All"}

  # popup menu for comboboxes
  menu .menucbx
    .menucbx add command -label "Cut" -underline 2 \
      -accelerator "Ctrl+X" -command {event generate [focus] <<Cut>>}
    .menucbx add command -label "Copy" -underline 0 \
      -accelerator "Ctrl+C" -command {event generate [focus] <<Copy>>}
    .menucbx add command -label "Paste" -underline 0 \
      -accelerator "Ctrl+V" -command {event generate [focus] <<Paste>>}
}

################################################################################
# WIDGETS
#
proc tEdit::Widgets {} {
  # set different styles for search/replace comboboxes
  ttk::style configure valid.TCombobox -fieldbackground white
  ttk::style configure error.TCombobox -fieldbackground red

  ttk::panedwindow .main -orient horizontal
    ttk::frame .browser
      ttk::treeview .tree -takefocus 0 -selectmode browse \
        -columns {fullpath type} -displaycolumns "" \
        -yscrollcommand {.ytree set} -xscrollcommand {.xtree set}
        .tree heading #0 -anchor center -text "File Browser"
      ttk::scrollbar .ytree -orient vertical   -command {.tree yview}
      ttk::scrollbar .xtree -orient horizontal -command {.tree xview}
      # grid treeview and scrollbars in the left pane frame
      grid .tree  -in .browser -row 0 -column 0 -sticky nswe
      grid .ytree -in .browser -row 0 -column 1 -sticky ns
      grid .xtree -in .browser -row 1 -column 0 -sticky we
      grid rowconfigure    .browser .tree -weight 1
      grid columnconfigure .browser .tree -weight 1

    ttk::frame .editor
      ttk::notebook .nb -takefocus 0
      ttk::notebook::enableTraversal .nb
      ttk::labelframe .fmarks -borderwidth 1 -relief flat -text "Marks:"
        tk::listbox .marks -takefocus 0 -highlightthickness 0 -width 10 \
          -xscrollcommand {.xmarks set} -yscrollcommand {.ymarks set}
        ttk::scrollbar .ymarks -orient vertical   -command {.marks yview}
        ttk::scrollbar .xmarks -orient horizontal -command {.marks xview}
        # grid listbox and scrollbars in the labelframe
        grid .marks  -in .fmarks -row 0 -column 0 -sticky ns
        grid .ymarks -in .fmarks -row 0 -column 1 -sticky ns
        grid .xmarks -in .fmarks -row 1 -column 0 -sticky we
        grid rowconfigure .fmarks .marks -weight 1
      # grid notebook and marks in the right pane frame
      grid .nb     -in .editor -row 0 -column 0 -sticky nswe
      grid .fmarks -in .editor -row 0 -column 1 -sticky ns
      grid rowconfigure    .editor .nb -weight 1
      grid columnconfigure .editor .nb -weight 1
      # remove marks from view
      grid remove .fmarks

  ttk::frame .fgoto -borderwidth 1 -relief flat
    ttk::label .lgoto -relief flat -text "Go to line:"
    ttk::combobox .cbgoto -takefocus 0 -style valid.TCombobox \
      -textvariable tEdit::goto -values $tEdit::hgoto \
      -validate key -validatecommand {string is digit %P} \
      -postcommand {.cbgoto configure -values $tEdit::hgoto}
    tk::button .bgoto -text "Go" -width 3 -padx 0 -pady 0 \
      -underline 0 -takefocus 0 \
      -command {tEdit::GotoLine [.nb select].text $tEdit::goto}
    grid .lgoto  -in .fgoto -row 0 -column 0 -sticky w
    grid .cbgoto -in .fgoto -row 0 -column 1 -sticky w
    grid .bgoto  -in .fgoto -row 0 -column 2 -sticky w

  ttk::frame .fsearch -borderwidth 1 -relief sunken
    ttk::labelframe .lfsearch -borderwidth 1 -relief flat -text "Search for:"
      ttk::combobox .cbsearch -takefocus 0 -style valid.TCombobox \
        -textvariable tEdit::search -values $tEdit::hsearch \
        -postcommand {.cbsearch configure -values $tEdit::hsearch}
      ttk::button .bfindnext -text "Find Next" -width 9 \
        -underline 5 -takefocus 0 \
        -command {.menu.search invoke "Find Next"}
      ttk::button .bfindprev -text "Find Prev" -width 9 \
        -underline 5 -takefocus 0 \
        -command {.menu.search invoke "Find Prev"}
      ttk::radiobutton .rbnocase -text "Ignore Case" \
        -underline 7 -takefocus 0 -variable tEdit::regexp -value "-nocase"
      ttk::radiobutton .rbexact -text "Exact" \
        -underline 1 -takefocus 0 -variable tEdit::regexp -value "-exact"
      ttk::radiobutton .rbregexp -text "Regular Expression" \
        -underline 8 -takefocus 0 -variable tEdit::regexp -value "-regexp"
      ttk::checkbutton .ckreplace -text "Replace" \
        -underline 0 -takefocus 0 \
        -variable tEdit::showreplace -onvalue "true" -offvalue "false" \
        -command {tEdit::ToggleView .lfreplace $tEdit::showreplace}
      # grid them in the search labelframe
      grid .cbsearch  -in .lfsearch -row 0 -column 0 -sticky we
      grid .bfindnext -in .lfsearch -row 0 -column 1 -sticky w
      grid .bfindprev -in .lfsearch -row 0 -column 2 -sticky w
      grid .rbregexp  -in .lfsearch -row 1 -column 0 -sticky w
      grid .rbexact   -in .lfsearch -row 1 -column 1 -sticky w
      grid .rbnocase  -in .lfsearch -row 1 -column 2 -sticky w
      grid .ckreplace -in .lfsearch -row 1 -column 3 -sticky e
      grid columnconfigure .lfsearch .ckreplace -weight 1

    ttk::labelframe .lfreplace -borderwidth 1 -relief flat -text "Replace with:"
      ttk::combobox .cbreplace -takefocus 0 -style valid.TCombobox \
        -textvariable tEdit::replace -values $tEdit::hreplace \
        -postcommand {.cbreplace configure -values $tEdit::hreplace}
      ttk::button .breplace -text "Replace" -width 9 \
        -underline 0 -takefocus 0 \
        -command {tEdit::Replace $tEdit::search $tEdit::replace}
      ttk::button .breplaceall -text "All" -width 9 \
        -underline 0 -takefocus 0 \
        -command {tEdit::ReplaceAll $tEdit::search $tEdit::replace}
        # grid them in the replace labelframe
        grid .cbreplace   -in .lfreplace -row 0 -column 0 -sticky we
        grid .breplace    -in .lfreplace -row 0 -column 1 -sticky w
        grid .breplaceall -in .lfreplace -row 0 -column 2 -sticky w
      # grid find and replace labelframes in the search frame
      grid .lfsearch  -in .fsearch -row 0 -column 0 -sticky we
      grid .lfreplace -in .fsearch -row 1 -column 0 -sticky we
      grid columnconfigure .fsearch .lfsearch -weight 1
      # remove replace frame from view
      grid remove .lfreplace

  ttk::frame .statusbar -borderwidth 1 -relief sunken
    ttk::label .filepath -relief flat -anchor w -textvariable tEdit::filepath
    ttk::label .message  -relief flat -anchor c -textvariable tEdit::message
    ttk::label .encoding -relief flat -anchor e -textvariable tEdit::encoding
    ttk::sizegrip .sizegrip
    grid .filepath -in .statusbar -row 0 -column 0 -sticky w
    grid .message  -in .statusbar -row 0 -column 1 -sticky we
    grid .encoding -in .statusbar -row 0 -column 2 -sticky e
    grid .sizegrip -in .statusbar -row 0 -column 3 -sticky e
    grid columnconfigure .statusbar .message -weight 1

  grid .main      -in . -row 0 -column 0 -sticky nswe
  grid .fgoto     -in . -row 1 -column 0 -sticky we
  grid .fsearch   -in . -row 2 -column 0 -sticky we
  grid .statusbar -in . -row 3 -column 0 -sticky we
  grid rowconfigure    . .main -weight 1
  grid columnconfigure . .main -weight 1
  # remove search frame from view
  grid remove .fgoto
  grid remove .fsearch

  .main add .editor
}

################################################################################
# BINDINGS
#
proc tEdit::Bindings {} {
  # deactivate some predefined bindings from Text widget
  set bindings [list <Tab> <Control-Tab> <Control-Shift-Tab> <Control-a> \
    <Control-b> <Control-f> <Control-e> <Control-n> <Control-i> <Control-o> \
    <Control-w> <Control-y> <Control-z> <Control-Z> \
  ]
  foreach keysym $bindings {
    bind Text $keysym {return 0}
  }
  # text widget bindings
  bind Text <<Modified>>  {tEdit::Modified %W}
  bind Text <<UndoStack>> {tEdit::UndoStack %W}
  bind Text <Control-z>   {.menu.edit invoke "Undo"}
  bind Text <Control-Z>   {.menu.edit invoke "Redo"}
  bind Text <Control-i>   {.menu.edit invoke "Increase Indent"}
  bind Text <Control-u>   {.menu.edit invoke "Decrease Indent"}
  bind Text <Control-x>   {.menu.edit invoke "Cut"}
  bind Text <Control-c>   {.menu.edit invoke "Copy"}
  bind Text <Control-v>   {.menu.edit invoke "Paste"}
  bind Text <Control-a>   {.menu.edit invoke "Select All"}
  bind Text <Control-j>   {.menu.edit invoke "Fold Lines"}
  bind Text <Control-J>   {.menu.edit invoke "Unfold All"}
  bind Text <Control-e>   {.menu.edit invoke "Calculate"}
  bind Text <Control-m>   {.menu.marks invoke "Mark Toggle"}
  bind Text <ButtonPress-3>         {focus %W; tk_popup .menu.edit %X %Y}
  bind Text <Control-ButtonPress-3> {focus %W; tk_popup .menu %X %Y}
  bind Text <Control-bracketleft>   {event generate %W <<PrevPara>>}
  bind Text <Control-bracketright>  {event generate %W <<NextPara>>}
  bind Text <Control-braceleft>     {event generate %W <<SelectPrevPara>>}
  bind Text <Control-braceright>    {event generate %W <<SelectNextPara>>}
  # bindings for better block selection/deletion
  bind Text <Delete>    {tEdit::DeleteSelection %W "Delete"}
  bind Text <BackSpace> {tEdit::DeleteSelection %W "Backspace"}

  # do not keep selection on combobox select
  bind TCombobox <<ComboboxSelected>> {%W selection clear}

  # global window bindings
  foreach keysym {<Escape> <ButtonRelease-1>} {
    bind all $keysym {tEdit::DnD::CancelDnD .tree}
  }
  bind all <Control-n>  {.menu.file invoke "New Tab"}
  bind all <Control-F4> {.menu.file invoke "Close Tab"}
  bind all <Control-o>  {.menu.file invoke "Open..."}
  bind all <Control-s>  {.menu.file invoke "Save"}
  bind all <Control-S>  {.menu.file invoke "Save As..."}
  bind all <Control-q>  {.menu.file invoke "Close All"}
  bind all <Control-Q>  {.menu.file invoke "Exit"}
  bind all <Control-f>  {.menu.search invoke "Show Search"}
  bind all <F3>         {.menu.search invoke "Find Next"}
  bind all <Shift-F3>   {.menu.search invoke "Find Prev"}
  bind all <Control-l>  {.menu.search invoke "Clear Highlight"}
  bind all <Shift-F5>   {.menu.marks invoke "Show Marks"}
  bind all <F5>         {.menu.marks invoke "Next Mark"}
  bind all <Control-M>  {.menu.marks invoke "Clear Marks"}
  bind all <F2>         {.menu.show invoke "File Browser"}
  bind all <Control-g>  {.menu.show invoke "Go to line"}
  bind all <F1>         {.menu.help invoke "About tEdit..."}
  # toggle menu "Set Font..." state
  bind all <<TkFontchooserVisibility>> {
    .menu.options entryconfigure "Select Font..." \
      -state [expr {[tk fontchooser configure -visible] ? "disabled" : "normal"}]
  }
  # make Return and Keypad-Enter keys behave the same
  bind all <KP_Enter> {event generate %W <Return>}

  # treeview widget bindings
  foreach keysym {<Return> <Double-ButtonRelease-1>} {
    bind .tree $keysym {tEdit::OpenFileBrowser [%W focus] %W}
  }
  bind .tree <<TreeviewOpen>> {tEdit::PopulateBrowser [%W focus] %W}

  # notebook bindings
  # on tab change reload user settings (except font and line numbering)
  bind .nb <<NotebookTabChanged>> {tEdit::FocusTab [%W select]}
  # popup menu on tab labels
  bind .nb <ButtonPress-3> {tEdit::DnD::CancelDnD %W; tEdit::TabsMenu %W %x %y %X %Y}
  # mouse wheel rotate tabs
  bind .nb <4> {tEdit::NextTab}
  bind .nb <5> {tEdit::PrevTab}
  # drag and drop tab replacement
  bind .nb <ButtonPress-1>           {tEdit::DnD::DragDelay %W %x %y %X %Y}
  bind .nb <ButtonRelease-1>         {tEdit::DnD::DropTab %W %x %y}
  bind .nb <Control-ButtonPress-1>   {tEdit::DnD::DragDelay %W %x %y %X %Y}
  bind .nb <Control-ButtonRelease-1> {tEdit::DnD::DropTab %W %x %y}

  # mark list bindings
  foreach keysym [list <Return> <Double-ButtonRelease-1>] {
    bind .marks $keysym {tEdit::MarkSee [%W get active]}
  }
  bind .marks <Delete> {tEdit::MarkDelete active}

  # search & replace combobox bindings
  foreach combobox {.cbsearch .cbreplace} {
    bind $combobox <ButtonPress-3> {focus %W; tk_popup .menucbx %X %Y}
    bind $combobox <Escape> {.menu.search invoke "Show Search"}
  }
  bind .cbreplace <Return> {.breplace invoke}
  bind .cbsearch  <Return> {.bfindnext invoke}

  # go to line combobox
  bind .cbgoto <ButtonPress-3> {focus %W; tk_popup .menucbx %X %Y}
  bind .cbgoto <Return> {.bgoto invoke}
  bind .cbgoto <Escape> {.menu.show invoke "Go to line"}
  bind .cbgoto <<ComboboxSelected>> {.bgoto invoke}
}

################################################################################
# MAIN PROGRAM
#
tEdit::Widgets
tEdit::Menus
tEdit::Bindings
tEdit::StartBrowser

# window manager instructions
wm title    . "tEdit"
wm minsize  . 460 300
wm protocol . WM_DELETE_WINDOW {.menu.file invoke "Close All"}
wm attributes . -topmost $tEdit::ontop

################################################################################
# COMMAND LINE
#
if {$::argc > 0} {
  foreach arg $::argv {
    if {[file exists $arg]} {
      tEdit::OpenFile $arg
    } else {
      tEdit::NewTab {} $arg
    }
  }
  if {[llength [.nb tabs]] == 0} {exit 1}
} else {
  tEdit::NewTab
}
# get input from OS pipe (stdout)
chan event stdin readable {tEdit::GetPipedData}
